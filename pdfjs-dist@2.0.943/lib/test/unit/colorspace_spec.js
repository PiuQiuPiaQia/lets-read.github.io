"use strict";var _primitives=require("../../core/primitives"),_stream=require("../../core/stream"),_colorspace=require("../../core/colorspace"),_function=require("../../core/function"),_test_utils=require("./test_utils");describe("colorspace",(function(){describe("ColorSpace",(function(){it("should be true if decode is not an array",(function(){expect(_colorspace.ColorSpace.isDefaultDecode("string",0)).toBeTruthy()})),it("should be true if length of decode array is not correct",(function(){expect(_colorspace.ColorSpace.isDefaultDecode([0],1)).toBeTruthy(),expect(_colorspace.ColorSpace.isDefaultDecode([0,1,0],1)).toBeTruthy()})),it("should be true if decode map matches the default decode map",(function(){expect(_colorspace.ColorSpace.isDefaultDecode([],0)).toBeTruthy(),expect(_colorspace.ColorSpace.isDefaultDecode([0,0],1)).toBeFalsy(),expect(_colorspace.ColorSpace.isDefaultDecode([0,1],1)).toBeTruthy(),expect(_colorspace.ColorSpace.isDefaultDecode([0,1,0,1,0,1],3)).toBeTruthy(),expect(_colorspace.ColorSpace.isDefaultDecode([0,1,0,1,1,1],3)).toBeFalsy(),expect(_colorspace.ColorSpace.isDefaultDecode([0,1,0,1,0,1,0,1],4)).toBeTruthy(),expect(_colorspace.ColorSpace.isDefaultDecode([1,0,0,1,0,1,0,1],4)).toBeFalsy()}))})),describe("DeviceGrayCS",(function(){it("should handle the case when cs is a Name object",(function(){var e=_primitives.Name.get("DeviceGray"),t=new _test_utils.XRefMock([{ref:new _primitives.Ref(10,0),data:new _primitives.Dict}]),i=new _primitives.Dict,a=new _function.PDFFunctionFactory({xref:t}),r=_colorspace.ColorSpace.parse(e,t,i,a),n=new Uint8Array([27,125,250,131]),c=new Uint8ClampedArray(48),o=new Uint8ClampedArray([27,27,27,27,27,27,125,125,125,125,125,125,27,27,27,27,27,27,125,125,125,125,125,125,250,250,250,250,250,250,131,131,131,131,131,131,250,250,250,250,250,250,131,131,131,131,131,131]);r.fillRgb(c,2,2,4,4,4,8,n,0),expect(r.getRgb(new Float32Array([.1]),0)).toEqual(new Uint8ClampedArray([26,26,26])),expect(r.getOutputLength(2,0)).toEqual(6),expect(r.isPassthrough(8)).toBeFalsy(),expect(c).toEqual(o)})),it("should handle the case when cs is an indirect object",(function(){var e=new _primitives.Ref(10,0),t=new _test_utils.XRefMock([{ref:e,data:_primitives.Name.get("DeviceGray")}]),i=new _primitives.Dict,a=new _function.PDFFunctionFactory({xref:t}),r=_colorspace.ColorSpace.parse(e,t,i,a),n=new Uint8Array([27,125,250,131]),c=new Uint8ClampedArray(27),o=new Uint8ClampedArray([27,27,27,27,27,27,125,125,125,27,27,27,27,27,27,125,125,125,250,250,250,250,250,250,131,131,131]);r.fillRgb(c,2,2,3,3,3,8,n,0),expect(r.getRgb(new Float32Array([.2]),0)).toEqual(new Uint8ClampedArray([51,51,51])),expect(r.getOutputLength(3,1)).toEqual(12),expect(r.isPassthrough(8)).toBeFalsy(),expect(c).toEqual(o)}))})),describe("DeviceRgbCS",(function(){it("should handle the case when cs is a Name object",(function(){var e=_primitives.Name.get("DeviceRGB"),t=new _test_utils.XRefMock([{ref:new _primitives.Ref(10,0),data:new _primitives.Dict}]),i=new _primitives.Dict,a=new _function.PDFFunctionFactory({xref:t}),r=_colorspace.ColorSpace.parse(e,t,i,a),n=new Uint8Array([27,125,250,131,139,140,111,25,198,21,147,255]),c=new Uint8ClampedArray(48),o=new Uint8ClampedArray([27,125,250,27,125,250,131,139,140,131,139,140,27,125,250,27,125,250,131,139,140,131,139,140,111,25,198,111,25,198,21,147,255,21,147,255,111,25,198,111,25,198,21,147,255,21,147,255]);r.fillRgb(c,2,2,4,4,4,8,n,0),expect(r.getRgb(new Float32Array([.1,.2,.3]),0)).toEqual(new Uint8ClampedArray([26,51,77])),expect(r.getOutputLength(4,0)).toEqual(4),expect(r.isPassthrough(8)).toBeTruthy(),expect(c).toEqual(o)})),it("should handle the case when cs is an indirect object",(function(){var e=new _primitives.Ref(10,0),t=new _test_utils.XRefMock([{ref:e,data:_primitives.Name.get("DeviceRGB")}]),i=new _primitives.Dict,a=new _function.PDFFunctionFactory({xref:t}),r=_colorspace.ColorSpace.parse(e,t,i,a),n=new Uint8Array([27,125,250,131,139,140,111,25,198,21,147,255]),c=new Uint8ClampedArray(27),o=new Uint8ClampedArray([27,125,250,27,125,250,131,139,140,27,125,250,27,125,250,131,139,140,111,25,198,111,25,198,21,147,255]);r.fillRgb(c,2,2,3,3,3,8,n,0),expect(r.getRgb(new Float32Array([.1,.2,.3]),0)).toEqual(new Uint8ClampedArray([26,51,77])),expect(r.getOutputLength(4,1)).toEqual(5),expect(r.isPassthrough(8)).toBeTruthy(),expect(c).toEqual(o)}))})),describe("DeviceCmykCS",(function(){it("should handle the case when cs is a Name object",(function(){var e=_primitives.Name.get("DeviceCMYK"),t=new _test_utils.XRefMock([{ref:new _primitives.Ref(10,0),data:new _primitives.Dict}]),i=new _primitives.Dict,a=new _function.PDFFunctionFactory({xref:t}),r=_colorspace.ColorSpace.parse(e,t,i,a),n=new Uint8Array([27,125,250,128,131,139,140,45,111,25,198,78,21,147,255,69]),c=new Uint8ClampedArray(48),o=new Uint8ClampedArray([135,81,18,135,81,18,114,102,97,114,102,97,135,81,18,135,81,18,114,102,97,114,102,97,112,144,75,112,144,75,188,98,27,188,98,27,112,144,75,112,144,75,188,98,27,188,98,27]);r.fillRgb(c,2,2,4,4,4,8,n,0),expect(r.getRgb(new Float32Array([.1,.2,.3,1]),0)).toEqual(new Uint8ClampedArray([32,28,21])),expect(r.getOutputLength(4,0)).toEqual(3),expect(r.isPassthrough(8)).toBeFalsy(),expect(c).toEqual(o)})),it("should handle the case when cs is an indirect object",(function(){var e=new _primitives.Ref(10,0),t=new _test_utils.XRefMock([{ref:e,data:_primitives.Name.get("DeviceCMYK")}]),i=new _primitives.Dict,a=new _function.PDFFunctionFactory({xref:t}),r=_colorspace.ColorSpace.parse(e,t,i,a),n=new Uint8Array([27,125,250,128,131,139,140,45,111,25,198,78,21,147,255,69]),c=new Uint8ClampedArray(27),o=new Uint8ClampedArray([135,81,18,135,81,18,114,102,97,135,81,18,135,81,18,114,102,97,112,144,75,112,144,75,188,98,27]);r.fillRgb(c,2,2,3,3,3,8,n,0),expect(r.getRgb(new Float32Array([.1,.2,.3,1]),0)).toEqual(new Uint8ClampedArray([32,28,21])),expect(r.getOutputLength(4,1)).toEqual(4),expect(r.isPassthrough(8)).toBeFalsy(),expect(c).toEqual(o)}))})),describe("CalGrayCS",(function(){it("should handle the case when cs is an array",(function(){var e=new _primitives.Dict;e.set("WhitePoint",[1,1,1]),e.set("BlackPoint",[0,0,0]),e.set("Gamma",2);var t=[_primitives.Name.get("CalGray"),e],i=new _test_utils.XRefMock([{ref:new _primitives.Ref(10,0),data:new _primitives.Dict}]),a=new _primitives.Dict,r=new _function.PDFFunctionFactory({xref:i}),n=_colorspace.ColorSpace.parse(t,i,a,r),c=new Uint8Array([27,125,250,131]),o=new Uint8ClampedArray(48),s=new Uint8ClampedArray([25,25,25,25,25,25,143,143,143,143,143,143,25,25,25,25,25,25,143,143,143,143,143,143,251,251,251,251,251,251,149,149,149,149,149,149,251,251,251,251,251,251,149,149,149,149,149,149]);n.fillRgb(o,2,2,4,4,4,8,c,0),expect(n.getRgb(new Float32Array([1]),0)).toEqual(new Uint8ClampedArray([255,255,255])),expect(n.getOutputLength(4,0)).toEqual(12),expect(n.isPassthrough(8)).toBeFalsy(),expect(o).toEqual(s)}))})),describe("CalRGBCS",(function(){it("should handle the case when cs is an array",(function(){var e=new _primitives.Dict;e.set("WhitePoint",[1,1,1]),e.set("BlackPoint",[0,0,0]),e.set("Gamma",[1,1,1]),e.set("Matrix",[1,0,0,0,1,0,0,0,1]);var t=[_primitives.Name.get("CalRGB"),e],i=new _test_utils.XRefMock([{ref:new _primitives.Ref(10,0),data:new _primitives.Dict}]),a=new _primitives.Dict,r=new _function.PDFFunctionFactory({xref:i}),n=_colorspace.ColorSpace.parse(t,i,a,r),c=new Uint8Array([27,125,250,131,139,140,111,25,198,21,147,255]),o=new Uint8ClampedArray(27),s=new Uint8ClampedArray([0,238,255,0,238,255,185,196,195,0,238,255,0,238,255,185,196,195,235,0,243,235,0,243,0,255,255]);n.fillRgb(o,2,2,3,3,3,8,c,0),expect(n.getRgb(new Float32Array([.1,.2,.3]),0)).toEqual(new Uint8ClampedArray([0,147,151])),expect(n.getOutputLength(4,0)).toEqual(4),expect(n.isPassthrough(8)).toBeFalsy(),expect(o).toEqual(s)}))})),describe("LabCS",(function(){it("should handle the case when cs is an array",(function(){var e=new _primitives.Dict;e.set("WhitePoint",[1,1,1]),e.set("BlackPoint",[0,0,0]),e.set("Range",[-100,100,-100,100]);var t=[_primitives.Name.get("Lab"),e],i=new _test_utils.XRefMock([{ref:new _primitives.Ref(10,0),data:new _primitives.Dict}]),a=new _primitives.Dict,r=new _function.PDFFunctionFactory({xref:i}),n=_colorspace.ColorSpace.parse(t,i,a,r),c=new Uint8Array([27,25,50,31,19,40,11,25,98,21,47,55]),o=new Uint8ClampedArray(27),s=new Uint8ClampedArray([0,49,101,0,49,101,0,53,117,0,49,101,0,49,101,0,53,117,0,41,40,0,41,40,0,43,90]);n.fillRgb(o,2,2,3,3,3,8,c,0),expect(n.getRgb([55,25,35],0)).toEqual(new Uint8ClampedArray([188,100,61])),expect(n.getOutputLength(4,0)).toEqual(4),expect(n.isPassthrough(8)).toBeFalsy(),expect(n.isDefaultDecode([0,1])).toBeTruthy(),expect(o).toEqual(s)}))})),describe("IndexedCS",(function(){it("should handle the case when cs is an array",(function(){var e=new Uint8Array([23,155,35,147,69,93,255,109,70]),t=[_primitives.Name.get("Indexed"),_primitives.Name.get("DeviceRGB"),2,e],i=new _test_utils.XRefMock([{ref:new _primitives.Ref(10,0),data:new _primitives.Dict}]),a=new _primitives.Dict,r=new _function.PDFFunctionFactory({xref:i}),n=_colorspace.ColorSpace.parse(t,i,a,r),c=new Uint8Array([2,2,0,1]),o=new Uint8ClampedArray(27),s=new Uint8ClampedArray([255,109,70,255,109,70,255,109,70,255,109,70,255,109,70,255,109,70,23,155,35,23,155,35,147,69,93]);n.fillRgb(o,2,2,3,3,3,8,c,0),expect(n.getRgb([2],0)).toEqual(new Uint8ClampedArray([255,109,70])),expect(n.isPassthrough(8)).toBeFalsy(),expect(n.isDefaultDecode([0,1])).toBeTruthy(),expect(o).toEqual(s)}))})),describe("AlternateCS",(function(){it("should handle the case when cs is an array",(function(){var e=new _primitives.Dict;e.set("FunctionType",4),e.set("Domain",[0,1]),e.set("Range",[0,1,0,1,0,1,0,1]),e.set("Length",58);var t=new _stream.StringStream("{ dup 0.84 mul exch 0.00 exch dup 0.44 mul exch 0.21 mul }");t=new _stream.Stream(t.bytes,0,58,e);var i=new _primitives.Ref(10,0),a=[_primitives.Name.get("Separation"),_primitives.Name.get("LogoGreen"),_primitives.Name.get("DeviceCMYK"),i],r=new _test_utils.XRefMock([{ref:i,data:t}]),n=new _primitives.Dict,c=new _function.PDFFunctionFactory({xref:r}),o=_colorspace.ColorSpace.parse(a,r,n,c),s=new Uint8Array([27,25,50,31]),l=new Uint8ClampedArray(27),p=new Uint8ClampedArray([226,242,241,226,242,241,229,244,242,226,242,241,226,242,241,229,244,242,203,232,229,203,232,229,222,241,238]);o.fillRgb(l,2,2,3,3,3,8,s,0),expect(o.getRgb([.1],0)).toEqual(new Uint8ClampedArray([228,243,242])),expect(o.isPassthrough(8)).toBeFalsy(),expect(o.isDefaultDecode([0,1])).toBeTruthy(),expect(l).toEqual(p)}))}))}));