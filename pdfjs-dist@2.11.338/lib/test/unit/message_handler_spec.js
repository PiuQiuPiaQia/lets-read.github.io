"use strict";var _util=require("../../shared/util.js"),_api=require("../../display/api.js"),_message_handler=require("../../shared/message_handler.js");describe("message_handler",(function(){function e(a){return Promise.resolve().then((()=>a&&e(a-1)))}describe("sendWithStream",(function(){it("should return a ReadableStream",(function(){const e=new _api.LoopbackPort,a=new _message_handler.MessageHandler("main","worker",e),t=a.sendWithStream("fakeHandler");expect(typeof t).toEqual("object"),expect(typeof t.getReader).toEqual("function")})),it("should read using a reader",(async function(){let a="";const t=new _api.LoopbackPort,n=new _message_handler.MessageHandler("main","worker",t),r=new _message_handler.MessageHandler("worker","main",t);r.on("fakeHandler",((t,n)=>(n.onPull=function(){a+="p"},n.onCancel=function(e){a+="c"},n.ready.then((()=>(n.enqueue("hi"),n.ready))).then((()=>{n.close()})),e(5))));const o=n.sendWithStream("fakeHandler",{},{highWaterMark:1,size(){return 1}}),l=o.getReader();await e(10),expect(a).toEqual("");let i=await l.read();expect(a).toEqual("p"),expect(i.value).toEqual("hi"),expect(i.done).toEqual(!1),await e(10),i=await l.read(),expect(i.value).toEqual(void 0),expect(i.done).toEqual(!0)})),it("should not read any data when cancelled",(async function(){let a="";const t=new _api.LoopbackPort,n=new _message_handler.MessageHandler("worker","main",t);n.on("fakeHandler",((e,t)=>{t.onPull=function(){a+="p"},t.onCancel=function(e){a+="c"},a+="0",t.ready.then((()=>(a+="1",t.enqueue([1,2,3,4],4),t.ready))).then((()=>(a+="2",t.enqueue([5,6,7,8],4),t.ready))).then((()=>{a+="3",t.close()}),(()=>{a+="4"}))}));const r=new _message_handler.MessageHandler("main","worker",t),o=r.sendWithStream("fakeHandler",{},{highWaterMark:4,size(e){return e.length}}),l=o.getReader();await e(10),expect(a).toEqual("01");const i=await l.read();expect(i.value).toEqual([1,2,3,4]),expect(i.done).toEqual(!1),await e(10),expect(a).toEqual("01p2"),await l.cancel(new _util.AbortException("reader cancelled.")),expect(a).toEqual("01p2c4")})),it("should not read when errored",(async function(){let a="";const t=new _api.LoopbackPort,n=new _message_handler.MessageHandler("worker","main",t);n.on("fakeHandler",((e,t)=>{t.onPull=function(){a+="p"},t.onCancel=function(e){a+="c"},a+="0",t.ready.then((()=>(a+="1",t.enqueue([1,2,3,4],4),t.ready))).then((()=>{a+="e",t.error(new Error("should not read when errored"))}))}));const r=new _message_handler.MessageHandler("main","worker",t),o=r.sendWithStream("fakeHandler",{},{highWaterMark:4,size(e){return e.length}}),l=o.getReader();await e(10),expect(a).toEqual("01");const i=await l.read();expect(i.value).toEqual([1,2,3,4]),expect(i.done).toEqual(!1);try{await l.read(),expect(!1).toEqual(!0)}catch(d){expect(a).toEqual("01pe"),expect(d instanceof _util.UnknownErrorException).toEqual(!0),expect(d.message).toEqual("should not read when errored")}})),it("should read data with blocking promise",(async function(){let a="";const t=new _api.LoopbackPort,n=new _message_handler.MessageHandler("worker","main",t);n.on("fakeHandler",((e,t)=>{t.onPull=function(){a+="p"},t.onCancel=function(e){a+="c"},a+="0",t.ready.then((()=>(a+="1",t.enqueue([1,2,3,4],4),t.ready))).then((()=>(a+="2",t.enqueue([5,6,7,8],4),t.ready))).then((()=>{t.close()}))}));const r=new _message_handler.MessageHandler("main","worker",t),o=r.sendWithStream("fakeHandler",{},{highWaterMark:4,size(e){return e.length}}),l=o.getReader();await e(10),expect(a).toEqual("01");let i=await l.read();expect(i.value).toEqual([1,2,3,4]),expect(i.done).toEqual(!1),await e(10),expect(a).toEqual("01p2"),i=await l.read(),expect(i.value).toEqual([5,6,7,8]),expect(i.done).toEqual(!1),await e(10),expect(a).toEqual("01p2p"),i=await l.read(),expect(i.value).toEqual(void 0),expect(i.done).toEqual(!0)})),it("should read data with blocking promise and buffer whole data into stream",(async function(){let a="";const t=new _api.LoopbackPort,n=new _message_handler.MessageHandler("worker","main",t);n.on("fakeHandler",((t,n)=>(n.onPull=function(){a+="p"},n.onCancel=function(e){a+="c"},a+="0",n.ready.then((()=>(a+="1",n.enqueue([1,2,3,4],4),n.ready))).then((()=>(a+="2",n.enqueue([5,6,7,8],4),n.ready))).then((()=>{n.close()})),e(10))));const r=new _message_handler.MessageHandler("main","worker",t),o=r.sendWithStream("fakeHandler",{},{highWaterMark:8,size(e){return e.length}}),l=o.getReader();await e(10),expect(a).toEqual("012");let i=await l.read();expect(i.value).toEqual([1,2,3,4]),expect(i.done).toEqual(!1),await e(10),expect(a).toEqual("012p"),i=await l.read(),expect(i.value).toEqual([5,6,7,8]),expect(i.done).toEqual(!1),await e(10),expect(a).toEqual("012p"),i=await l.read(),expect(i.value).toEqual(void 0),expect(i.done).toEqual(!0)})),it("should ignore any pull after close is called",(async function(){let a="";const t=new _api.LoopbackPort,n=(0,_util.createPromiseCapability)(),r=new _message_handler.MessageHandler("worker","main",t);r.on("fakeHandler",((e,t)=>(t.onPull=function(){a+="p"},t.onCancel=function(e){a+="c"},a+="0",t.ready.then((()=>{a+="1",t.enqueue([1,2,3,4],4)})),n.promise.then((()=>{t.close()})))));const o=new _message_handler.MessageHandler("main","worker",t),l=o.sendWithStream("fakeHandler",{},{highWaterMark:10,size(e){return e.length}}),i=l.getReader();await e(10),expect(a).toEqual("01"),n.resolve(),await n.promise;let d=await i.read();expect(d.value).toEqual([1,2,3,4]),expect(d.done).toEqual(!1),await e(10),expect(a).toEqual("01"),d=await i.read(),expect(d.value).toEqual(void 0),expect(d.done).toEqual(!0)}))}))}));