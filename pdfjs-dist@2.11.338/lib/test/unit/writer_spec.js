"use strict";var _primitives=require("../../core/primitives.js"),_writer=require("../../core/writer.js"),_util=require("../../shared/util.js"),_stream=require("../../core/stream.js");describe("Writer",(function(){describe("Incremental update",(function(){it("should update a file with new objects",(function(){const e=new Uint8Array,t=[{ref:_primitives.Ref.get(123,45),data:"abc\n"},{ref:_primitives.Ref.get(456,78),data:"defg\n"}],n={newRef:_primitives.Ref.get(789,0),startXRef:314,fileIds:["id",""],rootRef:null,infoRef:null,encryptRef:null,filename:"foo.pdf",info:{}};let i=(0,_writer.incrementalUpdate)({originalData:e,xrefInfo:n,newRefs:t});i=(0,_util.bytesToString)(i);const r="\nabc\ndefg\n789 0 obj\n<< /Size 790 /Prev 314 /Type /XRef /Index [0 1 123 1 456 1 789 1] /ID [(id) (\x01#Eg\x89\xab\xcd\xef\xfe\xdc\xba\x98vT2\x10)] /W [1 1 2] /Length 16>> stream\n\0\x01\xff\xff\x01\x01\0-\x01\x05\0N\x01\n\0\0\nendstream\nendobj\nstartxref\n10\n%%EOF\n";expect(i).toEqual(r)})),it("should update a file, missing the /ID-entry, with new objects",(function(){const e=new Uint8Array,t=[{ref:_primitives.Ref.get(123,45),data:"abc\n"}],n={newRef:_primitives.Ref.get(789,0),startXRef:314,fileIds:null,rootRef:null,infoRef:null,encryptRef:null,filename:"foo.pdf",info:{}};let i=(0,_writer.incrementalUpdate)({originalData:e,xrefInfo:n,newRefs:t});i=(0,_util.bytesToString)(i);const r="\nabc\n789 0 obj\n<< /Size 790 /Prev 314 /Type /XRef /Index [0 1 123 1 789 1] /W [1 1 2] /Length 12>> stream\n\0\x01\xff\xff\x01\x01\0-\x01\x05\0\0\nendstream\nendobj\nstartxref\n5\n%%EOF\n";expect(i).toEqual(r)}))})),describe("writeDict",(function(){it("should write a Dict",(function(){const e=new _primitives.Dict(null);e.set("A",_primitives.Name.get("B")),e.set("B",_primitives.Ref.get(123,456)),e.set("C",789),e.set("D","hello world"),e.set("E","(hello\\world)"),e.set("F",[1.23001,4.50001,6]);const t=new _primitives.Dict(null);t.set("H",123.00001);const n="a stream",i=new _stream.StringStream(n);i.dict=new _primitives.Dict(null),i.dict.set("Length",n.length),t.set("I",i),e.set("G",t),e.set("J",!0),e.set("K",!1),e.set("NullArr",[null,10]),e.set("NullVal",null);const r=[];(0,_writer.writeDict)(e,r,null);const l="<< /A /B /B 123 456 R /C 789 /D (hello world) /E (\\(hello\\\\world\\)) /F [1.23 4.5 6] /G << /H 123 /I << /Length 8>> stream\na stream\nendstream\n>> /J true /K false /NullArr [null 10] /NullVal null>>";expect(r.join("")).toEqual(l)})),it("should write a Dict in escaping PDF names",(function(){const e=new _primitives.Dict(null);e.set("\xfeA#",_primitives.Name.get("hello")),e.set("B",_primitives.Name.get("#hello")),e.set("C",_primitives.Name.get("he\xfello\xff"));const t=[];(0,_writer.writeDict)(e,t,null);const n="<< /#feA#23 /hello /B /#23hello /C /he#fello#ff>>";expect(t.join("")).toEqual(n)}))})),describe("XFA",(function(){it("should update AcroForm when no datasets in XFA array",(function(){const e=new Uint8Array,t=[],n=new _primitives.Dict(null);n.set("XFA",["preamble",_primitives.Ref.get(123,0),"postamble",_primitives.Ref.get(456,0)]);const i=_primitives.Ref.get(789,0),r=_primitives.Ref.get(101112,0),l="<hello>world</hello>",s={newRef:_primitives.Ref.get(131415,0),startXRef:314,fileIds:null,rootRef:null,infoRef:null,encryptRef:null,filename:"foo.pdf",info:{}};let o=(0,_writer.incrementalUpdate)({originalData:e,xrefInfo:s,newRefs:t,hasXfa:!0,xfaDatasetsRef:r,hasXfaDatasetsEntry:!1,acroFormRef:i,acroForm:n,xfaData:l,xref:{}});o=(0,_util.bytesToString)(o);const a="\n789 0 obj\n<< /XFA [(preamble) 123 0 R (datasets) 101112 0 R (postamble) 456 0 R]>>\n101112 0 obj\n<< /Type /EmbeddedFile /Length 20>>\nstream\n<hello>world</hello>\nendstream\nendobj\n131415 0 obj\n<< /Size 131416 /Prev 314 /Type /XRef /Index [0 1 789 1 101112 1 131415 1] /W [1 1 2] /Length 16>> stream\n\0\x01\xff\xff\x01\x01\0\0\x01T\0\0\x01\xb2\0\0\nendstream\nendobj\nstartxref\n178\n%%EOF\n";expect(o).toEqual(a)}))}))}));