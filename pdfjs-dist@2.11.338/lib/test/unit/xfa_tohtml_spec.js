"use strict";var _is_node=require("../../shared/is_node.js"),_factory=require("../../core/xfa/factory.js");describe("XFAFactory",(function(){function t(e,a,n,p=!1,o=[0]){if((!p&&e[a]===n||p&&e.attributes&&e.attributes[a]===n)&&0===o[0]--)return e;if(!e.children)return null;for(const r of e.children){const e=t(r,a,n,p,o);if(e)return e}return null}describe("toHTML",(function(){it("should convert some basic properties to CSS",(function(){const t='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="123pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <draw y="1pt" w="11pt" h="22pt" rotate="90" x="2pt">\n            <assist><toolTip>A tooltip !!</toolTip></assist>\n            <font size="7pt" typeface="FooBar" baselineShift="2pt">\n              <fill>\n                <color value="12,23,34"/>\n                <solid/>\n              </fill>\n            </font>\n            <value/>\n            <margin topInset="1pt" bottomInset="2pt" leftInset="3pt" rightInset="4pt"/>\n            <para spaceAbove="1pt" spaceBelow="2pt" textIndent="3pt" marginLeft="4pt" marginRight="5pt"/>\n          </draw>\n        </pageArea>\n      </pageSet>\n      <subform name="second">\n        <breakBefore targetType="pageArea" startNew="1"/>\n        <subform>\n          <draw w="1pt" h="1pt"><value><text>foo</text></value></draw>\n        </subform>\n      </subform>\n      <subform name="third">\n        <breakBefore targetType="pageArea" startNew="1"/>\n        <subform>\n          <draw w="1pt" h="1pt"><value><text>bar</text></value></draw>\n        </subform>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      ',e=new _factory.XFAFactory({"xdp:xdp":t});e.setFonts([]),expect(e.numberPages).toEqual(2);const a=e.getPages(),n=a.children[0];expect(n.attributes.style).toEqual({height:"789px",width:"456px"}),expect(n.children.length).toEqual(2);const p=n.children[1];expect(p.attributes.class).toEqual(["xfaContentarea"]),expect(p.attributes.style).toEqual({height:"789px",width:"456px",left:"123px",top:"0px"});const o=n.children[0],r=o.children[0];expect(o.attributes.class).toEqual(["xfaWrapper"]),expect(o.attributes.style).toEqual({alignSelf:"start",height:"22px",left:"2px",position:"absolute",top:"1px",transform:"rotate(-90deg)",transformOrigin:"top left",width:"11px"}),expect(r.attributes.class).toEqual(["xfaDraw","xfaFont","xfaWrapped"]),expect(r.attributes.title).toEqual("A tooltip !!"),expect(r.attributes.style).toEqual({color:"#0c1722",fontFamily:'"FooBar"',fontKerning:"none",letterSpacing:"0px",fontStyle:"normal",fontWeight:"normal",fontSize:"6.93px",padding:"1px 4px 2px 3px",verticalAlign:"2px"}),expect(r.attributes.style).toEqual(a.children[1].children[0].children[0].attributes.style)})),it("should have an alt attribute from toolTip",(function(){_is_node.isNodeJS&&pending("Image is not supported in Node.js.");const e='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="0pt" w="456pt" h="789pt"/>\n          <draw name="BA-Logo" y="5.928mm" x="128.388mm" w="71.237mm" h="9.528mm">\n            <value>\n              <image contentType="image/png">iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVQYV2NgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII=</image>\n            </value>\n            <assist><toolTip>alt text</toolTip></assist>\n          </draw>\n        </pageArea>\n      </pageSet>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      ',a=new _factory.XFAFactory({"xdp:xdp":e});expect(a.numberPages).toEqual(1);const n=a.getPages(),p=t(n,"name","img");expect(p.attributes.alt).toEqual("alt text")})),it("should have a aria heading role and level",(function(){const t='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="0pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <draw name="BA-Logo" y="5.928mm" x="128.388mm" w="71.237mm" h="9.528mm">\n            <value><text>foo</text></value>\n            <assist role="H2"></assist>\n          </draw>\n        </pageArea>\n      </pageSet>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      ',e=new _factory.XFAFactory({"xdp:xdp":t});expect(e.numberPages).toEqual(1);const a=e.getPages(),n=a.children[0],p=n.children[0],o=p.children[0];expect(o.attributes.role).toEqual("heading"),expect(o.attributes["aria-level"]).toEqual("2")})),it("should have aria table role",(function(){const e='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="0pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <font size="7pt" typeface="FooBar" baselineShift="2pt">\n          </font>\n        </pageArea>\n      </pageSet>\n      <subform name="table" mergeMode="matchTemplate" layout="table">\n        <subform layout="row" name="row1">\n          <assist role="TH"></assist>\n          <draw name="header1" y="5.928mm" x="128.388mm" w="71.237mm" h="9.528mm">\n            <value><text>Header Col 1</text></value>\n          </draw>\n          <draw name="header2" y="5.928mm" x="128.388mm" w="71.237mm" h="9.528mm">\n            <value><text>Header Col 2</text></value>\n          </draw>\n        </subform>\n        <subform layout="row" name="row2">\n          <draw name="cell1" y="5.928mm" x="128.388mm" w="71.237mm" h="9.528mm">\n            <value><text>Cell 1</text></value>\n          </draw>\n          <draw name="cell2" y="5.928mm" x="128.388mm" w="71.237mm" h="9.528mm">\n            <value><text>Cell 2</text></value>\n          </draw>\n        </subform>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      ',a=new _factory.XFAFactory({"xdp:xdp":e});a.setFonts([]),expect(a.numberPages).toEqual(1);const n=a.getPages(),p=t(n,"xfaName","table",!0);expect(p.attributes.role).toEqual("table");const o=t(n,"xfaName","row1",!0);expect(o.attributes.role).toEqual("row");const r=t(n,"xfaName","header2",!0);expect(r.attributes.role).toEqual("columnheader");const s=t(n,"xfaName","row2",!0);expect(s.attributes.role).toEqual("row");const x=t(n,"xfaName","cell2",!0);expect(x.attributes.role).toEqual("cell")})),it("should have a maxLength property",(function(){const e='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="0pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <field y="1pt" w="11pt" h="22pt" x="2pt">\n            <ui>\n              <textEdit multiLine="0"/>\n            </ui>\n            <value>\n              <text maxChars="123"/>\n            </value>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name="first">\n        <draw w="1pt" h="1pt"><value><text>foo</text></value></draw>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      ',a=new _factory.XFAFactory({"xdp:xdp":e});expect(a.numberPages).toEqual(1);const n=a.getPages(),p=t(n,"name","input");expect(p.attributes.maxLength).toEqual(123)})),it("should have an aria-label property from speak",(function(){const e='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="0pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <field y="1pt" w="11pt" h="22pt" x="2pt">\n            <assist><speak>Screen Reader</speak></assist>\n            <ui>\n              <textEdit multiLine="0"/>\n            </ui>\n            <value>\n              <text maxChars="123"/>\n            </value>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name="first">\n        <draw w="1pt" h="1pt"><value><text>foo</text></value></draw>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      ',a=new _factory.XFAFactory({"xdp:xdp":e});expect(a.numberPages).toEqual(1);const n=a.getPages(),p=t(n,"name","input");expect(p.attributes["aria-label"]).toEqual("Screen Reader")})),it("should have an aria-label property from toolTip",(function(){const e='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="0pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <field y="1pt" w="11pt" h="22pt" x="2pt">\n            <assist><toolTip>Screen Reader</toolTip></assist>\n            <ui>\n              <textEdit multiLine="0"/>\n            </ui>\n            <value>\n              <text maxChars="123"/>\n            </value>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name="first">\n        <draw w="1pt" h="1pt"><value><text>foo</text></value></draw>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      ',a=new _factory.XFAFactory({"xdp:xdp":e});expect(a.numberPages).toEqual(1);const n=a.getPages(),p=t(n,"name","input");expect(p.attributes["aria-label"]).toEqual("Screen Reader")})),it("should have an input or textarea",(function(){const e='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="123pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <field y="1pt" w="11pt" h="22pt" x="2pt">\n            <ui>\n              <textEdit/>\n            </ui>\n          </field>\n          <field y="1pt" w="11pt" h="22pt" x="2pt">\n            <ui>\n              <textEdit multiLine="1"/>\n            </ui>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name="first">\n        <draw w="1pt" h="1pt"><value><text>foo</text></value></draw>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      ',a=new _factory.XFAFactory({"xdp:xdp":e});expect(a.numberPages).toEqual(1);const n=a.getPages(),p=t(n,"name","input");expect(p).not.toEqual(null);const o=t(n,"name","textarea");expect(o).not.toEqual(null)}))})),it("should have an input or textarea",(function(){const e='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="123pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <field y="1pt" w="11pt" h="22pt" x="2pt">\n            <ui>\n              <textEdit multiLine="1"/>\n            </ui>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name="first">\n        <field y="1pt" w="11pt" h="22pt" x="2pt" name="hello">\n          <ui>\n            <textEdit/>\n          </ui>\n          <value>\n            <integer/>\n          </value>\n        </field>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n      <toto>\n        <first>\n          <hello>123\n          </hello>\n        </first>\n      </toto>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n    ',a=new _factory.XFAFactory({"xdp:xdp":e});expect(a.numberPages).toEqual(1);const n=a.getPages(),p=t(n,"name","input");expect(p).not.toEqual(null),expect(p.attributes.value).toEqual("123")})),it("should parse URLs correctly",(function(){function e(t){return`\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="0pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n          <draw name="url" y="5.928mm" x="128.388mm" w="71.237mm" h="9.528mm">\n            <value>\n              <exData contentType="text/html">\n                <body xmlns="http://www.w3.org/1999/xhtml">\n                  <a href="${t}">${t}</a>\n                </body>\n              </exData>\n            </value>\n          </draw>\n        </pageArea>\n      </pageSet>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `}let a,n,p;a=new _factory.XFAFactory({"xdp:xdp":e("https://www.example.com/")}),expect(a.numberPages).toEqual(1),n=a.getPages(),p=t(n,"name","a"),expect(p.value).toEqual("https://www.example.com/"),expect(p.attributes.href).toEqual("https://www.example.com/"),a=new _factory.XFAFactory({"xdp:xdp":e("www.example.com/")}),expect(a.numberPages).toEqual(1),n=a.getPages(),p=t(n,"name","a"),expect(p.value).toEqual("www.example.com/"),expect(p.attributes.href).toEqual("http://www.example.com/"),a=new _factory.XFAFactory({"xdp:xdp":e("mailto:test@example.com")}),expect(a.numberPages).toEqual(1),n=a.getPages(),p=t(n,"name","a"),expect(p.value).toEqual("mailto:test@example.com"),expect(p.attributes.href).toEqual("mailto:test@example.com"),a=new _factory.XFAFactory({"xdp:xdp":e("qwerty/")}),expect(a.numberPages).toEqual(1),n=a.getPages(),p=t(n,"name","a"),expect(p.value).toEqual("qwerty/"),expect(p.attributes.href).toEqual("")})),it("should replace button with an URL by a link",(function(){const e='\n<?xml version="1.0"?>\n<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">\n  <template xmlns="http://www.xfa.org/schema/xfa-template/3.3">\n    <subform name="root" mergeMode="matchTemplate">\n      <pageSet>\n        <pageArea>\n          <contentArea x="123pt" w="456pt" h="789pt"/>\n          <medium stock="default" short="456pt" long="789pt"/>\n        </pageArea>\n      </pageSet>\n      <subform name="first">\n        <field y="1pt" w="11pt" h="22pt" x="2pt">\n          <ui>\n            <button/>\n          </ui>\n          <event activity="click" name="event__click">\n            <script contentType="application/x-javascript">\n              app.launchURL("https://github.com/mozilla/pdf.js", true);\n            <\/script>\n          </event>\n        </field>\n        <field y="1pt" w="11pt" h="22pt" x="2pt">\n          <ui>\n            <button/>\n          </ui>\n          <event activity="click" name="event__click">\n            <script contentType="application/x-javascript">\n              xfa.host.gotoURL("https://github.com/allizom/pdf.js");\n            <\/script>\n          </event>\n        </field>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n    ',a=new _factory.XFAFactory({"xdp:xdp":e});expect(a.numberPages).toEqual(1);const n=a.getPages();let p=t(n,"name","a");expect(p.attributes.href).toEqual("https://github.com/mozilla/pdf.js"),expect(p.attributes.newWindow).toEqual(!0),p=t(n,"name","a",!1,[1]),expect(p.attributes.href).toEqual("https://github.com/allizom/pdf.js"),expect(p.attributes.newWindow).toEqual(!1)}))}));