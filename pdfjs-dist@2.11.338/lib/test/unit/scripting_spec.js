"use strict";var _display_utils=require("../../display/display_utils.js");const sandboxBundleSrc="../../build/generic/build/pdf.sandbox.js";describe("Scripting",(function(){let e,t,a,n,l;function o(){const e=n+++"R";return e}function i(n){const l=(a++).toString();return e.eval(n,l).then((()=>{const e=t.get(l).result;return t.delete(l),e}))}beforeAll((function(){a=0,n=1,t=new Map,window.dispatchEvent=e=>{if(e.detail.command)t.set(e.detail.command,e.detail);else if(t.has(e.detail.id)){const a=t.get(e.detail.id);Object.assign(a,e.detail)}else t.set(e.detail.id,e.detail)},l=window.alert,window.alert=e=>{const a="alert";t.set(a,{command:a,value:e})};const o=(0,_display_utils.loadScript)(sandboxBundleSrc).then((()=>window.pdfjsSandbox.QuickJSSandbox()));e={createSandbox(e){o.then((t=>t.create(e)))},dispatchEventInSandbox(e){return o.then((t=>t.dispatchEvent(e)))},nukeSandbox(){o.then((e=>e.nukeSandbox()))},eval(e,t){return o.then((a=>a.evalForTesting(e,t)))}}})),afterAll((function(){e.nukeSandbox(),e=null,t=null,window.alert=l})),describe("Sandbox",(function(){it("should send a value, execute an action and get back a new value",(async()=>{function a(e){let t=0;for(let a=0;a<e;a++)t+=a;return t}const n=123,l=((n-1)*n/2).toString(),i=o(),c={objects:{field:[{id:i,value:"",actions:{Keystroke:[`${a.toString()}event.value = compute(parseInt(event.value));`]},type:"text"}]},calculationOrder:[],appInfo:{language:"en-US",platform:"Linux x86_64"}};e.createSandbox(c),await e.dispatchEventInSandbox({id:i,value:`${n}`,name:"Keystroke",willCommit:!0}),expect(t.has(i)).toEqual(!0),expect(t.get(i)).toEqual({id:i,valueAsString:l})}))})),describe("Doc",(function(){it("should treat globalThis as the doc",(async()=>{const t=o(),a={objects:{field:[{id:t,value:"",actions:{},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(a),await i("(this.foobar = 123456, 0)");const n=await i('this.getField("field").doc.foobar');expect(n).toEqual(123456)})),it("should get field using a path",(async()=>{const t=e=>({id:o(),value:e,actions:{},type:"text"}),a={objects:{A:[t(1)],"A.B":[t(2)],"A.B.C":[t(3)],"A.B.C.D":[t(4)],"A.B.C.D.E":[t(5)],"A.B.C.D.E.F":[t(6)],"A.B.C.D.G":[t(7)],C:[t(8)]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(a);let n=await i('this.getField("A").value');expect(n).toEqual(1),n=await i('this.getField("B.C").value'),expect(n).toEqual(3),n=await i('this.getField("B.C").value'),expect(n).toEqual(3),n=await i('this.getField("B.C.D#0").value'),expect(n).toEqual(5),n=await i('this.getField("B.C.D#1").value'),expect(n).toEqual(7),n=await i('this.getField("C").value'),expect(n).toEqual(8),n=await i('this.getField("A.B.C.D").getArray().map((x) => x.value)'),expect(n).toEqual([5,7])}))})),describe("Util",(function(){beforeAll((function(){e.createSandbox({appInfo:{language:"en-US",platform:"Linux x86_64"},objects:{},calculationOrder:[]})})),describe("printd",(function(){it("should print a date according to a format",(async()=>{const e='new Date("Sun Apr 15 2007 03:14:15")';let t=await i(`util.printd(0, ${e})`);expect(t).toEqual("D:20070415031415"),t=await i(`util.printd(1, ${e})`),expect(t).toEqual("2007.04.15 03:14:15"),t=await i(`util.printd(2, ${e})`),expect(t).toEqual("4/15/07 3:14:15 am"),t=await i(`util.printd("mmmm mmm mm m", ${e})`),expect(t).toEqual("April Apr 04 4"),t=await i(`util.printd("dddd ddd dd d", ${e})`),expect(t).toEqual("Sunday Sun 15 15")}))})),describe("scand",(function(){it("should parse a date according to a format",(async()=>{const e=new Date("Sun Apr 15 2007 03:14:15");let t=await i('util.scand(0, "D:20070415031415").toString()');expect(new Date(t)).toEqual(e),t=await i('util.scand(1, "2007.04.15 03:14:15").toString()'),expect(new Date(t)).toEqual(e),t=await i('util.scand(2, "4/15/07 3:14:15 am").toString()'),expect(new Date(t)).toEqual(e)}))})),describe("printf",(function(){it("should print some data according to a format",(async()=>{let e=await i('util.printf("Integer numbers: %d, %d,...", 1.234, 56.789)');expect(e).toEqual("Integer numbers: 1, 56,..."),e=await i('util.printf("Hex numbers: %x, %x,...", 1234, 56789)'),expect(e).toEqual("Hex numbers: 4D2, DDD5,..."),e=await i('util.printf("Hex numbers with 0x: %#x, %#x,...", 1234, 56789)'),expect(e).toEqual("Hex numbers with 0x: 0x4D2, 0xDDD5,..."),e=await i('util.printf("Decimal number: %,0+.3f", 1234567.89123)'),expect(e).toEqual("Decimal number: +1,234,567.891"),e=await i('util.printf("Decimal number: %,0+8.3f", 1.234567)'),expect(e).toEqual("Decimal number: +  1.235"),e=await i('util.printf("Decimal number: %,0.2f", -12.34567)'),expect(e).toEqual("Decimal number: -12.35")})),it("should print a string with no argument",(async()=>{const e=await i('util.printf("hello world")');expect(e).toEqual("hello world")})),it("print a string with a percent",(async()=>{const e=await i('util.printf("%%s")');expect(e).toEqual("%%s")}))})),describe("printx",(function(){it("should print some data according to a format",(async()=>{const e=await i('util.printx("9 (999) 999-9999", "aaa14159697489zzz")');expect(e).toEqual("1 (415) 969-7489")}))}))})),describe("Events",(function(){it("should trigger an event and modify the source",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{test:['event.source.value = "123";']},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[]};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"",name:"test",willCommit:!0}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"123"})})),it("should trigger a Keystroke event and invalidate it",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{Keystroke:["event.rc = false;"]},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[]};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"hell",name:"Keystroke",willCommit:!1,change:"o",selStart:4,selEnd:4}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"hell",selRange:[4,4]})})),it("should trigger a Keystroke event and change it",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{Keystroke:['event.change = "a";']},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[]};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"hell",name:"Keystroke",willCommit:!1,change:"o",selStart:4,selEnd:4}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"hella"})})),it("should trigger an invalid commit Keystroke event",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{test:["event.rc = false;"]},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[]};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"",name:"test",willCommit:!0}),expect(t.has(a)).toEqual(!1)})),it("should trigger a valid commit Keystroke event",(async()=>{const a=o(),n=o(),l={objects:{field1:[{id:a,value:"",actions:{Validate:['event.value = "world";']},type:"text"}],field2:[{id:n,value:"",actions:{Calculate:['event.value = "hello";']},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[n]};e.createSandbox(l),await e.dispatchEventInSandbox({id:a,value:"hello",name:"Keystroke",willCommit:!0}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"world",valueAsString:"world"})}))})),describe("Color",(function(){function t(e){return[e[0],...e.slice(1).map((e=>Math.round(1e3*e)/1e3))]}beforeAll((function(){e.createSandbox({appInfo:{language:"en-US",platform:"Linux x86_64"},objects:{},calculationOrder:[]})})),it("should convert RGB color for different color spaces",(async()=>{let e=await i('color.convert(["RGB", 0.1, 0.2, 0.3], "T")');expect(t(e)).toEqual(["T"]),e=await i('color.convert(["RGB", 0.1, 0.2, 0.3], "G")'),expect(t(e)).toEqual(["G",.181]),e=await i('color.convert(["RGB", 0.1, 0.2, 0.3], "RGB")'),expect(t(e)).toEqual(["RGB",.1,.2,.3]),e=await i('color.convert(["RGB", 0.1, 0.2, 0.3], "CMYK")'),expect(t(e)).toEqual(["CMYK",.9,.8,.7,.7])})),it("should convert CMYK color for different color spaces",(async()=>{let e=await i('color.convert(["CMYK", 0.1, 0.2, 0.3, 0.4], "T")');expect(t(e)).toEqual(["T"]),e=await i('color.convert(["CMYK", 0.1, 0.2, 0.3, 0.4], "G")'),expect(t(e)).toEqual(["G",.371]),e=await i('color.convert(["CMYK", 0.1, 0.2, 0.3, 0.4], "RGB")'),expect(t(e)).toEqual(["RGB",.5,.3,.4]),e=await i('color.convert(["CMYK", 0.1, 0.2, 0.3, 0.4], "CMYK")'),expect(t(e)).toEqual(["CMYK",.1,.2,.3,.4])})),it("should convert Gray color for different color spaces",(async()=>{let e=await i('color.convert(["G", 0.1], "T")');expect(t(e)).toEqual(["T"]),e=await i('color.convert(["G", 0.1], "G")'),expect(t(e)).toEqual(["G",.1]),e=await i('color.convert(["G", 0.1], "RGB")'),expect(t(e)).toEqual(["RGB",.1,.1,.1]),e=await i('color.convert(["G", 0.1], "CMYK")'),expect(t(e)).toEqual(["CMYK",0,0,0,.9])})),it("should convert Transparent color for different color spaces",(async()=>{let e=await i('color.convert(["T"], "T")');expect(t(e)).toEqual(["T"]),e=await i('color.convert(["T"], "G")'),expect(t(e)).toEqual(["G",0]),e=await i('color.convert(["T"], "RGB")'),expect(t(e)).toEqual(["RGB",0,0,0]),e=await i('color.convert(["T"], "CMYK")'),expect(t(e)).toEqual(["CMYK",0,0,0,1])}))})),describe("App",(function(){beforeAll((function(){e.createSandbox({appInfo:{language:"en-US",platform:"Linux x86_64"},objects:{},calculationOrder:[]})})),it("should test language",(async()=>{let e=await i("app.language");expect(e).toEqual("ENU"),e=await i('app.language = "hello"'),expect(e).toEqual("app.language is read-only")})),it("should test platform",(async()=>{let e=await i("app.platform");expect(e).toEqual("UNIX"),e=await i('app.platform = "hello"'),expect(e).toEqual("app.platform is read-only")}))})),describe("AForm",(function(){beforeAll((function(){e.createSandbox({appInfo:{language:"en-US",platform:"Linux x86_64"},objects:{},calculationOrder:[],dispatchEventName:"_dispatchMe"})})),describe("AFExtractNums",(function(){it("should extract numbers",(async()=>{let e=await i('AFExtractNums("123 456 789")');expect(e).toEqual(["123","456","789"]),e=await i('AFExtractNums("123.456")'),expect(e).toEqual(["123","456"]),e=await i('AFExtractNums("123")'),expect(e).toEqual(["123"]),e=await i('AFExtractNums(".123")'),expect(e).toEqual(["0","123"]),e=await i('AFExtractNums(",123")'),expect(e).toEqual(["0","123"])}))})),describe("AFMakeNumber",(function(){it("should convert string to number",(async()=>{let e=await i('AFMakeNumber("123.456")');expect(e).toEqual(123.456),e=await i("AFMakeNumber(123.456)"),expect(e).toEqual(123.456),e=await i('AFMakeNumber("-123.456")'),expect(e).toEqual(-123.456),e=await i('AFMakeNumber("-123,456")'),expect(e).toEqual(-123.456),e=await i('AFMakeNumber("not a number")'),expect(e).toEqual(null)}))})),describe("AFMakeArrayFromList",(function(){it("should split a string into an array of strings",(async()=>{const e=await i('AFMakeArrayFromList("aaaa,  bbbbbbb,cc,ddd, e")');expect(e).toEqual(["aaaa"," bbbbbbb","cc","ddd","e"])}))})),describe("AFNumber_format",(function(){it("should format a number",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{test1:['AFNumber_Format(2, 0, 0, 0, "\u20ac", false);event.source.value = event.value;'],test2:['AFNumber_Format(1, 3, 0, 0, "$", true);event.source.value = event.value;'],test3:['AFNumber_Format(2, 0, 1, 0, "\u20ac", false);event.source.value = event.value;'],test4:['AFNumber_Format(2, 0, 2, 0, "\u20ac", false);event.source.value = event.value;'],test5:['AFNumber_Format(2, 0, 3, 0, "\u20ac", false);event.source.value = event.value;']},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"123456.789",name:"test1"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"123,456.79\u20ac"}),t.delete(a),await e.dispatchEventInSandbox({id:a,value:"223456.789",name:"test2"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"$223456,8"}),t.delete(a),await e.dispatchEventInSandbox({id:a,value:"-323456.789",name:"test3"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"323,456.79\u20ac",textColor:["RGB",1,0,0]}),t.delete(a),await e.dispatchEventInSandbox({id:a,value:"-423456.789",name:"test4"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"(423,456.79\u20ac)"}),t.delete(a),await e.dispatchEventInSandbox({id:a,value:"-52345.678",name:"test5"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"(52,345.68\u20ac)",textColor:["RGB",1,0,0]})}))})),describe("AFNumber_Keystroke",(function(){it("should validate a number on a keystroke event",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{Validate:["AFNumber_Keystroke(null, 0, null, null, null, null);"]},type:"text",name:"MyField"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"123456.789",name:"Keystroke",willCommit:!0}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"123456.789",valueAsString:"123456.789"})})),it("should not validate a number on a keystroke event",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{Validate:["AFNumber_Keystroke(null, 0, null, null, null, null);"]},type:"text",name:"MyField"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"123s456.789",name:"Keystroke",willCommit:!0}),expect(t.has("alert")).toEqual(!0),expect(t.get("alert")).toEqual({command:"alert",value:"The value entered does not match the format of the field [ MyField ]"})}))})),describe("AFPercent_Format",(function(){it("should format a percentage",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{test1:["AFPercent_Format(2, 1, false);event.source.value = event.value;"],test2:["AFPercent_Format(2, 1, true);event.source.value = event.value;"]},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"0.456789",name:"test1"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"45.68%"}),t.delete(a),await e.dispatchEventInSandbox({id:a,value:"0.456789",name:"test2"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"%45.68"})}))})),describe("AFDate_Format",(function(){it("should format a date",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{test1:["AFDate_Format(0);event.source.value = event.value;"],test2:["AFDate_Format(12);event.source.value = event.value;"]},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"Sun Apr 15 2007 03:14:15",name:"test1"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"4/15"}),t.delete(a),await e.dispatchEventInSandbox({id:a,value:"Sun Apr 15 2007 03:14:15",name:"test2"}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"4/15/07 3:14 am"})}))})),describe("AFRange_Validate",(function(){it("should validate a number in range [a, b]",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{Validate:["AFRange_Validate(true, 123, true, 456);"]},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"321",name:"Keystroke",willCommit:!0}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"321",valueAsString:"321"})})),it("should invalidate a number out of range [a, b]",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{Validate:["AFRange_Validate(true, 123, true, 456);"]},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"12",name:"Keystroke",willCommit:!0}),expect(t.has("alert")).toEqual(!0),expect(t.get("alert")).toEqual({command:"alert",value:"Invalid value: must be greater than or equal to 123 and less than or equal to 456."})}))})),describe("ASSimple_Calculate",(function(){it("should compute the sum of several fields",(async()=>{const a=[0,1,2,3].map((e=>o())),n={objects:{field1:[{id:a[0],value:"",actions:{},type:"text"}],field2:[{id:a[1],value:"",actions:{},type:"text"}],field3:[{id:a[2],value:"",actions:{},type:"text"}],field4:[{id:a[3],value:"",actions:{Calculate:['AFSimple_Calculate("SUM", ["field1", "field2", "field3"]);']},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[a[3]],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a[0],value:"1",name:"Keystroke",willCommit:!0}),expect(t.has(a[3])).toEqual(!0),expect(t.get(a[3])).toEqual({id:a[3],value:1,valueAsString:"1"}),await e.dispatchEventInSandbox({id:a[1],value:"2",name:"Keystroke",willCommit:!0}),expect(t.has(a[3])).toEqual(!0),expect(t.get(a[3])).toEqual({id:a[3],value:3,valueAsString:"3"}),await e.dispatchEventInSandbox({id:a[2],value:"3",name:"Keystroke",willCommit:!0}),expect(t.has(a[3])).toEqual(!0),expect(t.get(a[3])).toEqual({id:a[3],value:6,valueAsString:"6"})}))})),describe("AFSpecial_KeystrokeEx",(function(){it("should validate a phone number on a keystroke event",(async()=>{const a=o(),n={objects:{field:[{id:a,value:"",actions:{Keystroke:['AFSpecial_KeystrokeEx("9AXO");']},type:"text"}]},appInfo:{language:"en-US",platform:"Linux x86_64"},calculationOrder:[],dispatchEventName:"_dispatchMe"};e.createSandbox(n),await e.dispatchEventInSandbox({id:a,value:"",change:"3",name:"Keystroke",willCommit:!1,selStart:0,selEnd:0}),expect(t.has(a)).toEqual(!1),await e.dispatchEventInSandbox({id:a,value:"3",change:"F",name:"Keystroke",willCommit:!1,selStart:1,selEnd:1}),expect(t.has(a)).toEqual(!1),await e.dispatchEventInSandbox({id:a,value:"3F",change:"?",name:"Keystroke",willCommit:!1,selStart:2,selEnd:2}),expect(t.has(a)).toEqual(!1),await e.dispatchEventInSandbox({id:a,value:"3F?",change:"@",name:"Keystroke",willCommit:!1,selStart:3,selEnd:3}),expect(t.has(a)).toEqual(!0),expect(t.get(a)).toEqual({id:a,value:"3F?",selRange:[3,3]}),t.delete(a),await e.dispatchEventInSandbox({id:a,value:"3F?",change:"0",name:"Keystroke",willCommit:!0,selStart:3,selEnd:3}),expect(t.has(a)).toEqual(!1)}))})),describe("eMailValidate",(function(){it("should validate an e-mail address",(async()=>{let e=await i("eMailValidate(123)");expect(e).toEqual(!1),e=await i('eMailValidate("foo@bar.com")'),expect(e).toEqual(!0),e=await i('eMailValidate("foo bar")'),expect(e).toEqual(!1)}))}))}))}));