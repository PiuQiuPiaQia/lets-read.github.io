"use strict";var _cmap=require("../../core/cmap.js"),_test_utils=require("./test_utils.js"),_api=require("../../display/api.js"),_primitives=require("../../core/primitives.js"),_stream=require("../../core/stream.js");describe("cmap",(function(){let e;beforeAll((function(){const t=new _api.DefaultCMapReaderFactory({baseUrl:_test_utils.CMAP_PARAMS.cMapUrl,isCompressed:_test_utils.CMAP_PARAMS.cMapPacked});e=function(e){return t.fetch({name:e})}})),afterAll((function(){e=null})),it("parses beginbfchar",(async function(){const e="2 beginbfchar\n<03> <00>\n<04> <01>\nendbfchar\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t});expect(a.lookup(3)).toEqual(String.fromCharCode(0)),expect(a.lookup(4)).toEqual(String.fromCharCode(1)),expect(a.lookup(5)).toBeUndefined()})),it("parses beginbfrange with range",(async function(){const e="1 beginbfrange\n<06> <0B> 0\nendbfrange\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t});expect(a.lookup(5)).toBeUndefined(),expect(a.lookup(6)).toEqual(String.fromCharCode(0)),expect(a.lookup(11)).toEqual(String.fromCharCode(5)),expect(a.lookup(12)).toBeUndefined()})),it("parses beginbfrange with array",(async function(){const e="1 beginbfrange\n<0D> <12> [ 0 1 2 3 4 5 ]\nendbfrange\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t});expect(a.lookup(12)).toBeUndefined(),expect(a.lookup(13)).toEqual(0),expect(a.lookup(18)).toEqual(5),expect(a.lookup(19)).toBeUndefined()})),it("parses begincidchar",(async function(){const e="1 begincidchar\n<14> 0\nendcidchar\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t});expect(a.lookup(20)).toEqual(0),expect(a.lookup(21)).toBeUndefined()})),it("parses begincidrange",(async function(){const e="1 begincidrange\n<0016> <001B>   0\nendcidrange\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t});expect(a.lookup(21)).toBeUndefined(),expect(a.lookup(22)).toEqual(0),expect(a.lookup(27)).toEqual(5),expect(a.lookup(28)).toBeUndefined()})),it("decodes codespace ranges",(async function(){const e="1 begincodespacerange\n<01> <02>\n<00000003> <00000004>\nendcodespacerange\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t}),n={};a.readCharCode(String.fromCharCode(1),0,n),expect(n.charcode).toEqual(1),expect(n.length).toEqual(1),a.readCharCode(String.fromCharCode(0,0,0,3),0,n),expect(n.charcode).toEqual(3),expect(n.length).toEqual(4)})),it("decodes 4 byte codespace ranges",(async function(){const e="1 begincodespacerange\n<8EA1A1A1> <8EA1FEFE>\nendcodespacerange\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t}),n={};a.readCharCode(String.fromCharCode(142,161,161,161),0,n),expect(n.charcode).toEqual(2392957345),expect(n.length).toEqual(4)})),it("read usecmap",(async function(){const t="/Adobe-Japan1-1 usecmap\n",a=new _stream.StringStream(t),n=await _cmap.CMapFactory.create({encoding:a,fetchBuiltInCMap:e,useCMap:null});expect(n instanceof _cmap.CMap).toEqual(!0),expect(n.useCMap).not.toBeNull(),expect(n.builtInCMap).toBeFalsy(),expect(n.length).toEqual(8359),expect(n.isIdentityCMap).toEqual(!1)})),it("parses cmapname",(async function(){const e="/CMapName /Identity-H def\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t});expect(a.name).toEqual("Identity-H")})),it("parses wmode",(async function(){const e="/WMode 1 def\n",t=new _stream.StringStream(e),a=await _cmap.CMapFactory.create({encoding:t});expect(a.vertical).toEqual(!0)})),it("loads built in cmap",(async function(){const t=await _cmap.CMapFactory.create({encoding:_primitives.Name.get("Adobe-Japan1-1"),fetchBuiltInCMap:e,useCMap:null});expect(t instanceof _cmap.CMap).toEqual(!0),expect(t.useCMap).toBeNull(),expect(t.builtInCMap).toBeTruthy(),expect(t.length).toEqual(8359),expect(t.isIdentityCMap).toEqual(!1)})),it("loads built in identity cmap",(async function(){const t=await _cmap.CMapFactory.create({encoding:_primitives.Name.get("Identity-H"),fetchBuiltInCMap:e,useCMap:null});expect(t instanceof _cmap.IdentityCMap).toEqual(!0),expect(t.vertical).toEqual(!1),expect(t.length).toEqual(65536),expect((function(){return t.isIdentityCMap})).toThrow(new Error("should not access .isIdentityCMap"))})),it("attempts to load a non-existent built-in CMap",(async function(){try{await _cmap.CMapFactory.create({encoding:_primitives.Name.get("null"),fetchBuiltInCMap:e,useCMap:null}),expect(!1).toEqual(!0)}catch(t){expect(t instanceof Error).toEqual(!0),expect(t.message).toEqual("Unknown CMap name: null")}})),it("attempts to load a built-in CMap without the necessary API parameters",(async function(){function e(e){const t=new _api.DefaultCMapReaderFactory({});return t.fetch({name:e})}try{await _cmap.CMapFactory.create({encoding:_primitives.Name.get("Adobe-Japan1-1"),fetchBuiltInCMap:e,useCMap:null}),expect(!1).toEqual(!0)}catch(t){expect(t instanceof Error).toEqual(!0),expect(t.message).toEqual('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.')}})),it("attempts to load a built-in CMap with inconsistent API parameters",(async function(){function e(e){const t=new _api.DefaultCMapReaderFactory({baseUrl:_test_utils.CMAP_PARAMS.cMapUrl,isCompressed:!1});return t.fetch({name:e})}try{await _cmap.CMapFactory.create({encoding:_primitives.Name.get("Adobe-Japan1-1"),fetchBuiltInCMap:e,useCMap:null}),expect(!1).toEqual(!0)}catch(t){expect(t instanceof Error).toEqual(!0);const e=t.message;expect(e.startsWith("Unable to load CMap at: ")).toEqual(!0),expect(e.endsWith("/external/bcmaps/Adobe-Japan1-1")).toEqual(!0)}}))}));