"use strict";var _primitives=require("../../core/primitives.js"),_predictor_stream=require("../../core/predictor_stream.js"),_stream=require("../../core/stream.js");describe("stream",(function(){beforeEach((function(){jasmine.addMatchers({toMatchTypedArray(e,t){return{compare(e,t){const r={};if(e.length!==t.length)return r.pass=!1,r.message="Array length: "+e.length+", expected: "+t.length,r;r.pass=!0;for(let s=0,i=t.length;s<i;s++){const i=e[s],n=t[s];if(i!==n){r.pass=!1;break}}return r}}}})})),describe("PredictorStream",(function(){it("should decode simple predictor data",(function(){const e=new _primitives.Dict;e.set("Predictor",12),e.set("Colors",1),e.set("BitsPerComponent",8),e.set("Columns",2);const t=new _stream.Stream(new Uint8Array([2,100,3,2,1,255,2,1,255]),0,9,e),r=new _predictor_stream.PredictorStream(t,9,e),s=r.getBytes(6);expect(s).toMatchTypedArray(new Uint8Array([100,3,101,2,102,1])),r.reset();const i=r.getBytes(6,!0);expect(i).toEqual(new Uint8ClampedArray([100,3,101,2,102,1]))}))}))}));