"use strict";var _function=require("../../core/function.js"),_ps_parser=require("../../core/ps_parser.js"),_stream=require("../../core/stream.js");describe("function",(function(){beforeEach((function(){jasmine.addMatchers({toMatchArray(t,e){return{compare(t,e){const n={};if(t.length!==e.length)return n.pass=!1,n.message="Array length: "+t.length+", expected: "+e.length,n;n.pass=!0;for(let c=0;c<e.length;c++){const o=t[c],i=e[c];if(Array.isArray(i)){if(o.length!==i.length){n.pass=!1;break}for(let t=0;t<o.length;t++){const e=o[t],c=i[t];if(e!==c){n.pass=!1;break}}}else if(o!==i){n.pass=!1;break}}return n}}}})})),describe("PostScriptParser",(function(){function t(t){const e=new _stream.StringStream(t),n=new _ps_parser.PostScriptParser(new _ps_parser.PostScriptLexer(e));return n.parse()}it("parses empty programs",(function(){const e=t("{}");expect(e.length).toEqual(0)})),it("parses positive numbers",(function(){const e=999,n=t("{ "+e+" }"),c=[e];expect(n).toMatchArray(c)})),it("parses negative numbers",(function(){const e=-999,n=t("{ "+e+" }"),c=[e];expect(n).toMatchArray(c)})),it("parses negative floats",(function(){const e=3.3,n=t("{ "+e+" }"),c=[e];expect(n).toMatchArray(c)})),it("parses operators",(function(){const e=t("{ sub }"),n=["sub"];expect(e).toMatchArray(n)})),it("parses if statements",(function(){const e=t("{ { 99 } if }"),n=[3,"jz",99];expect(e).toMatchArray(n)})),it("parses ifelse statements",(function(){const e=t("{ { 99 } { 44 } ifelse }"),n=[5,"jz",99,6,"j",44];expect(e).toMatchArray(n)})),it("handles missing brackets",(function(){expect((function(){t("{")})).toThrow(new Error("Unexpected symbol: found undefined expected 1."))})),it("handles junk after the end",(function(){const e=3.3,n=t("{ "+e+" }#"),c=[e];expect(n).toMatchArray(c)}))})),describe("PostScriptEvaluator",(function(){function t(t){const e=new _stream.StringStream(t),n=new _ps_parser.PostScriptParser(new _ps_parser.PostScriptLexer(e)),c=n.parse(),o=new _function.PostScriptEvaluator(c),i=o.execute();return i}it("pushes stack",(function(){const e=t("{ 99 }"),n=[99];expect(e).toMatchArray(n)})),it("handles if with true",(function(){const e=t("{ 1 {99} if }"),n=[99];expect(e).toMatchArray(n)})),it("handles if with false",(function(){const e=t("{ 0 {99} if }"),n=[];expect(e).toMatchArray(n)})),it("handles ifelse with true",(function(){const e=t("{ 1 {99} {77} ifelse }"),n=[99];expect(e).toMatchArray(n)})),it("handles ifelse with false",(function(){const e=t("{ 0 {99} {77} ifelse }"),n=[77];expect(e).toMatchArray(n)})),it("handles nested if",(function(){const e=t("{ 1 {1 {77} if} if }"),n=[77];expect(e).toMatchArray(n)})),it("abs",(function(){const e=t("{ -2 abs }"),n=[2];expect(e).toMatchArray(n)})),it("adds",(function(){const e=t("{ 1 2 add }"),n=[3];expect(e).toMatchArray(n)})),it("boolean and",(function(){const e=t("{ true false and }"),n=[!1];expect(e).toMatchArray(n)})),it("bitwise and",(function(){const e=t("{ 254 1 and }"),n=[0];expect(e).toMatchArray(n)})),it("calculates the inverse tangent of a number",(function(){const e=t("{ 90 atan }"),n=[Math.atan(90)];expect(e).toMatchArray(n)})),it("handles bitshifting ",(function(){const e=t("{ 50 2 bitshift }"),n=[200];expect(e).toMatchArray(n)})),it("calculates the ceiling value",(function(){const e=t("{ 9.9 ceiling }"),n=[10];expect(e).toMatchArray(n)})),it("copies",(function(){const e=t("{ 99 98 2 copy }"),n=[99,98,99,98];expect(e).toMatchArray(n)})),it("calculates the cosine of a number",(function(){const e=t("{ 90 cos }"),n=[Math.cos(90)];expect(e).toMatchArray(n)})),it("converts to int",(function(){const e=t("{ 9.9 cvi }"),n=[9];expect(e).toMatchArray(n)})),it("converts negatives to int",(function(){const e=t("{ -9.9 cvi }"),n=[-9];expect(e).toMatchArray(n)})),it("converts to real",(function(){const e=t("{ 55.34 cvr }"),n=[55.34];expect(e).toMatchArray(n)})),it("divides",(function(){const e=t("{ 6 5 div }"),n=[1.2];expect(e).toMatchArray(n)})),it("maps division by zero to infinity",(function(){const e=t("{ 6 0 div }"),n=[1/0];expect(e).toMatchArray(n)})),it("duplicates",(function(){const e=t("{ 99 dup }"),n=[99,99];expect(e).toMatchArray(n)})),it("accepts an equality",(function(){const e=t("{ 9 9 eq }"),n=[!0];expect(e).toMatchArray(n)})),it("rejects an inequality",(function(){const e=t("{ 9 8 eq }"),n=[!1];expect(e).toMatchArray(n)})),it("exchanges",(function(){const e=t("{ 44 99 exch }"),n=[99,44];expect(e).toMatchArray(n)})),it("handles exponentiation",(function(){const e=t("{ 10 2 exp }"),n=[100];expect(e).toMatchArray(n)})),it("pushes false onto the stack",(function(){const e=t("{ false }"),n=[!1];expect(e).toMatchArray(n)})),it("calculates the floor value",(function(){const e=t("{ 9.9 floor }"),n=[9];expect(e).toMatchArray(n)})),it("handles greater than or equal to",(function(){const e=t("{ 10 9 ge }"),n=[!0];expect(e).toMatchArray(n)})),it("rejects less than for greater than or equal to",(function(){const e=t("{ 8 9 ge }"),n=[!1];expect(e).toMatchArray(n)})),it("handles greater than",(function(){const e=t("{ 10 9 gt }"),n=[!0];expect(e).toMatchArray(n)})),it("rejects less than or equal for greater than",(function(){const e=t("{ 9 9 gt }"),n=[!1];expect(e).toMatchArray(n)})),it("divides to integer",(function(){const e=t("{ 2 3 idiv }"),n=[0];expect(e).toMatchArray(n)})),it("divides to negative integer",(function(){const e=t("{ -2 3 idiv }"),n=[0];expect(e).toMatchArray(n)})),it("duplicates index",(function(){const e=t("{ 4 3 2 1 2 index }"),n=[4,3,2,1,3];expect(e).toMatchArray(n)})),it("handles less than or equal to",(function(){const e=t("{ 9 10 le }"),n=[!0];expect(e).toMatchArray(n)})),it("rejects greater than for less than or equal to",(function(){const e=t("{ 10 9 le }"),n=[!1];expect(e).toMatchArray(n)})),it("calculates the natural logarithm",(function(){const e=t("{ 10 ln }"),n=[Math.log(10)];expect(e).toMatchArray(n)})),it("calculates the base 10 logarithm",(function(){const e=t("{ 100 log }"),n=[2];expect(e).toMatchArray(n)})),it("handles less than",(function(){const e=t("{ 9 10 lt }"),n=[!0];expect(e).toMatchArray(n)})),it("rejects greater than or equal to for less than",(function(){const e=t("{ 10 9 lt }"),n=[!1];expect(e).toMatchArray(n)})),it("performs the modulo operation",(function(){const e=t("{ 4 3 mod }"),n=[1];expect(e).toMatchArray(n)})),it("multiplies two numbers (positive result)",(function(){const e=t("{ 9 8 mul }"),n=[72];expect(e).toMatchArray(n)})),it("multiplies two numbers (negative result)",(function(){const e=t("{ 9 -8 mul }"),n=[-72];expect(e).toMatchArray(n)})),it("accepts an inequality",(function(){const e=t("{ 9 8 ne }"),n=[!0];expect(e).toMatchArray(n)})),it("rejects an equality",(function(){const e=t("{ 9 9 ne }"),n=[!1];expect(e).toMatchArray(n)})),it("negates",(function(){const e=t("{ 4.5 neg }"),n=[-4.5];expect(e).toMatchArray(n)})),it("boolean not",(function(){const e=t("{ true not }"),n=[!1];expect(e).toMatchArray(n)})),it("bitwise not",(function(){const e=t("{ 12 not }"),n=[-13];expect(e).toMatchArray(n)})),it("boolean or",(function(){const e=t("{ true false or }"),n=[!0];expect(e).toMatchArray(n)})),it("bitwise or",(function(){const e=t("{ 254 1 or }"),n=[255];expect(e).toMatchArray(n)})),it("pops stack",(function(){const e=t("{ 1 2 pop }"),n=[1];expect(e).toMatchArray(n)})),it("rolls stack right",(function(){const e=t("{ 1 3 2 2 4 1 roll }"),n=[2,1,3,2];expect(e).toMatchArray(n)})),it("rolls stack left",(function(){const e=t("{ 1 3 2 2 4 -1 roll }"),n=[3,2,2,1];expect(e).toMatchArray(n)})),it("rounds a number",(function(){const e=t("{ 9.52 round }"),n=[10];expect(e).toMatchArray(n)})),it("calculates the sine of a number",(function(){const e=t("{ 90 sin }"),n=[Math.sin(90)];expect(e).toMatchArray(n)})),it("calculates a square root (integer)",(function(){const e=t("{ 100 sqrt }"),n=[10];expect(e).toMatchArray(n)})),it("calculates a square root (float)",(function(){const e=t("{ 99 sqrt }"),n=[Math.sqrt(99)];expect(e).toMatchArray(n)})),it("subtracts (positive result)",(function(){const e=t("{ 6 4 sub }"),n=[2];expect(e).toMatchArray(n)})),it("subtracts (negative result)",(function(){const e=t("{ 4 6 sub }"),n=[-2];expect(e).toMatchArray(n)})),it("pushes true onto the stack",(function(){const e=t("{ true }"),n=[!0];expect(e).toMatchArray(n)})),it("truncates a number",(function(){const e=t("{ 35.004 truncate }"),n=[35];expect(e).toMatchArray(n)})),it("calculates an exclusive or value",(function(){const e=t("{ 3 9 xor }"),n=[10];expect(e).toMatchArray(n)}))})),describe("PostScriptCompiler",(function(){function t(t,e,n,c){const o=new _function.PostScriptCompiler,i=o.compile(t,e,n);if(null===c)expect(i).toBeNull();else{expect(i).not.toBeNull();const t=new Function("src","srcOffset","dest","destOffset",i);for(let e=0;e<c.length;e++){const n=new Float32Array(c[e].output.length);t(c[e].input,0,n,0),expect(Array.prototype.slice.call(n,0)).toMatchArray(c[e].output)}}}it("check compiled add",(function(){t([.25,.5,"add"],[],[0,1],[{input:[],output:[.75]}]),t([0,"add"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t([.5,"add"],[0,1],[0,1],[{input:[.25],output:[.75]}]),t([0,"exch","add"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t([.5,"exch","add"],[0,1],[0,1],[{input:[.25],output:[.75]}]),t(["add"],[0,1,0,1],[0,1],[{input:[.25,.5],output:[.75]}]),t(["add"],[0,1],[0,1],null)})),it("check compiled sub",(function(){t([.5,.25,"sub"],[],[0,1],[{input:[],output:[.25]}]),t([0,"sub"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t([.5,"sub"],[0,1],[0,1],[{input:[.75],output:[.25]}]),t([0,"exch","sub"],[0,1],[-1,1],[{input:[.25],output:[-.25]}]),t([.75,"exch","sub"],[0,1],[-1,1],[{input:[.25],output:[.5]}]),t(["sub"],[0,1,0,1],[-1,1],[{input:[.25,.5],output:[-.25]}]),t(["sub"],[0,1],[0,1],null),t([1,"dup",3,2,"roll","sub","sub"],[0,1],[0,1],[{input:[.75],output:[.75]}])})),it("check compiled mul",(function(){t([.25,.5,"mul"],[],[0,1],[{input:[],output:[.125]}]),t([0,"mul"],[0,1],[0,1],[{input:[.25],output:[0]}]),t([.5,"mul"],[0,1],[0,1],[{input:[.25],output:[.125]}]),t([1,"mul"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t([0,"exch","mul"],[0,1],[0,1],[{input:[.25],output:[0]}]),t([.5,"exch","mul"],[0,1],[0,1],[{input:[.25],output:[.125]}]),t([1,"exch","mul"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t(["mul"],[0,1,0,1],[0,1],[{input:[.25,.5],output:[.125]}]),t(["mul"],[0,1],[0,1],null)})),it("check compiled max",(function(){t(["dup",.75,"gt",7,"jz","pop",.75],[0,1],[0,1],[{input:[.5],output:[.5]}]),t(["dup",.75,"gt",7,"jz","pop",.75],[0,1],[0,1],[{input:[1],output:[.75]}]),t(["dup",.75,"gt",5,"jz","pop",.75],[0,1],[0,1],null)})),it("check pop/roll/index",(function(){t([1,"pop"],[0,1],[0,1],[{input:[.5],output:[.5]}]),t([1,3,-1,"roll"],[0,1,0,1],[0,1,0,1,0,1],[{input:[.25,.5],output:[.5,1,.25]}]),t([1,3,1,"roll"],[0,1,0,1],[0,1,0,1,0,1],[{input:[.25,.5],output:[1,.25,.5]}]),t([1,3,1.5,"roll"],[0,1,0,1],[0,1,0,1,0,1],null),t([1,1,"index"],[0,1],[0,1,0,1,0,1],[{input:[.5],output:[.5,1,.5]}]),t([1,3,"index","pop"],[0,1],[0,1],null),t([1,.5,"index","pop"],[0,1],[0,1],null)})),it("check input boundaries",(function(){t([],[0,.5],[0,1],[{input:[1],output:[.5]}]),t([],[.5,1],[0,1],[{input:[0],output:[.5]}]),t(["dup"],[.5,.75],[0,1,0,1],[{input:[0],output:[.5,.5]}]),t([],[100,1001],[0,1e4],[{input:[1e3],output:[1e3]}])})),it("check output boundaries",(function(){t([],[0,1],[0,.5],[{input:[1],output:[.5]}]),t([],[0,1],[.5,1],[{input:[0],output:[.5]}]),t(["dup"],[0,1],[.5,1,.75,1],[{input:[0],output:[.5,.75]}]),t([],[0,1e4],[100,1001],[{input:[1e3],output:[1e3]}])})),it("compile optimized",(function(){const t=new _function.PostScriptCompiler,e=[0,"add",1,1,3,-1,"roll","sub","sub",1,"mul"],n=t.compile(e,[0,1],[0,1]);expect(n).toEqual("dest[destOffset + 0] = Math.max(0, Math.min(1, src[srcOffset + 0]));")}))}))}));