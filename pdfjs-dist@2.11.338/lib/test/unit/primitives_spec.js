"use strict";var _primitives=require("../../core/primitives.js"),_stream=require("../../core/stream.js"),_test_utils=require("./test_utils.js");describe("primitives",(function(){describe("Name",(function(){it("should retain the given name",(function(){const e="Font",t=_primitives.Name.get(e);expect(t.name).toEqual(e)})),it("should create only one object for a name and cache it",(function(){const e=_primitives.Name.get("Font"),t=_primitives.Name.get("Font"),i=_primitives.Name.get("Subtype"),n=_primitives.Name.get("Subtype");expect(e).toBe(t),expect(i).toBe(n),expect(e).not.toBe(i)})),it("should create only one object for *empty* names and cache it",(function(){const e=_primitives.Name.get(""),t=_primitives.Name.get(""),i=_primitives.Name.get("string");expect(e).toBe(t),expect(e).not.toBe(i)}))})),describe("Cmd",(function(){it("should retain the given cmd name",(function(){const e="BT",t=_primitives.Cmd.get(e);expect(t.cmd).toEqual(e)})),it("should create only one object for a command and cache it",(function(){const e=_primitives.Cmd.get("BT"),t=_primitives.Cmd.get("BT"),i=_primitives.Cmd.get("ET"),n=_primitives.Cmd.get("ET");expect(e).toBe(t),expect(i).toBe(n),expect(e).not.toBe(i)}))})),describe("Dict",(function(){const e=function(e){expect(e.has()).toBeFalsy(),expect(e.has("Prev")).toBeFalsy()},t=function(e){expect(e.get()).toBeUndefined(),expect(e.get("Prev")).toBeUndefined(),expect(e.get("Decode","D")).toBeUndefined(),expect(e.get("FontFile","FontFile2","FontFile3")).toBeUndefined()};let i,n,o;const s=42,c="file1",a="file2",r="file3";beforeAll((function(){i=new _primitives.Dict,n=new _primitives.Dict,n.set("Size",s),o=new _primitives.Dict,o.set("FontFile",c),o.set("FontFile2",a),o.set("FontFile3",r)})),afterAll((function(){i=n=o=null})),it("should allow assigning an XRef table after creation",(function(){const e=new _primitives.Dict(null);expect(e.xref).toEqual(null);const t=new _test_utils.XRefMock([]);e.assignXref(t),expect(e.xref).toEqual(t)})),it("should return correct size",(function(){const e=new _primitives.Dict(null);expect(e.size).toEqual(0),e.set("Type",_primitives.Name.get("Page")),expect(e.size).toEqual(1),e.set("Contents",_primitives.Ref.get(10,0)),expect(e.size).toEqual(2)})),it("should return invalid values for unknown keys",(function(){e(i),t(i)})),it("should return correct value for stored Size key",(function(){expect(n.has("Size")).toBeTruthy(),expect(n.get("Size")).toEqual(s),expect(n.get("Prev","Size")).toEqual(s),expect(n.get("Prev","Root","Size")).toEqual(s)})),it("should return invalid values for unknown keys when Size key is stored",(function(){e(n),t(n)})),it("should not accept to set a key with an undefined value",(function(){const e=new _primitives.Dict;expect((function(){e.set("Size")})).toThrow(new Error('Dict.set: The "value" cannot be undefined.')),expect(e.has("Size")).toBeFalsy(),t(e)})),it("should return correct values for multiple stored keys",(function(){expect(o.has("FontFile")).toBeTruthy(),expect(o.has("FontFile2")).toBeTruthy(),expect(o.has("FontFile3")).toBeTruthy(),expect(o.get("FontFile3")).toEqual(r),expect(o.get("FontFile2","FontFile3")).toEqual(a),expect(o.get("FontFile","FontFile2","FontFile3")).toEqual(c)})),it("should asynchronously fetch unknown keys",(async function(){const e=[o.getAsync("Size"),n.getAsync("FontFile","FontFile2","FontFile3")],t=await Promise.all(e);expect(t[0]).toBeUndefined(),expect(t[1]).toBeUndefined()})),it("should asynchronously fetch correct values for multiple stored keys",(async function(){const e=[o.getAsync("FontFile3"),o.getAsync("FontFile2","FontFile3"),o.getAsync("FontFile","FontFile2","FontFile3")],t=await Promise.all(e);expect(t[0]).toEqual(r),expect(t[1]).toEqual(a),expect(t[2]).toEqual(c)})),it("should callback for each stored key",(function(){const e=jasmine.createSpy("spy on callback in dictionary");o.forEach(e),expect(e).toHaveBeenCalled();const t=e.calls;expect(t.argsFor(0)).toEqual(["FontFile",c]),expect(t.argsFor(1)).toEqual(["FontFile2",a]),expect(t.argsFor(2)).toEqual(["FontFile3",r]),expect(t.count()).toEqual(3)})),it("should handle keys pointing to indirect objects, both sync and async",(async function(){const e=_primitives.Ref.get(1,0),t=new _test_utils.XRefMock([{ref:e,data:c}]),i=new _primitives.Dict(t);i.set("FontFile",e),expect(i.getRaw("FontFile")).toEqual(e),expect(i.get("FontFile","FontFile2","FontFile3")).toEqual(c);const n=await i.getAsync("FontFile","FontFile2","FontFile3");expect(n).toEqual(c)})),it("should handle arrays containing indirect objects",(function(){const e=_primitives.Ref.get(1,0),t=_primitives.Ref.get(2,0),i=0,n=1,o=new _test_utils.XRefMock([{ref:e,data:i},{ref:t,data:n}]),s=new _primitives.Dict(o);s.set("BBox",[i,n,e,t]),expect(s.get("BBox")).toEqual([i,n,e,t]),expect(s.getArray("BBox")).toEqual([i,n,i,n])})),it("should get all key names",(function(){const e=["FontFile","FontFile2","FontFile3"],t=o.getKeys();expect(t.sort()).toEqual(e)})),it("should get all raw values",(function(){const e=[c,a,r],t=o.getRawValues();expect(t.sort()).toEqual(e);const i=_primitives.Name.get("Page"),n=new _primitives.Dict(null),s=_primitives.Ref.get(5,0),l=new _stream.StringStream("data"),u=_primitives.Ref.get(10,0),p=new _test_utils.XRefMock([{ref:s,data:n},{ref:u,data:l}]),m=new _primitives.Dict(p);m.set("Type",i),m.set("Resources",s),m.set("Contents",u);const f=[u,s,i],d=m.getRawValues();expect(d.sort()).toEqual(f)})),it("should create only one object for Dict.empty",(function(){const e=_primitives.Dict.empty,t=_primitives.Dict.empty;expect(e).toBe(t),expect(e).not.toBe(i)})),it("should correctly merge dictionaries",(function(){const e=["FontFile","FontFile2","FontFile3","Size"],t=new _primitives.Dict;t.set("FontFile","Type1 font file");const i=_primitives.Dict.merge({xref:null,dictArray:[o,n,t]}),s=i.getKeys();expect(s.sort()).toEqual(e),expect(i.get("FontFile")).toEqual(c)})),it("should correctly merge sub-dictionaries",(function(){const e=new _primitives.Dict;e.set("F1","Local font one");const t=new _primitives.Dict;t.set("F1","Global font one"),t.set("F2","Global font two"),t.set("F3","Global font three");const i=new _primitives.Dict;i.set("Font",e);const n=new _primitives.Dict;n.set("Font",t);const o=_primitives.Dict.merge({xref:null,dictArray:[i,n]}),s=_primitives.Dict.merge({xref:null,dictArray:[i,n],mergeSubDicts:!0}),c=o.get("Font"),a=s.get("Font");expect(c instanceof _primitives.Dict).toEqual(!0),expect(a instanceof _primitives.Dict).toEqual(!0);const r=c.getKeys(),l=a.getKeys();expect(r).toEqual(["F1"]),expect(l).toEqual(["F1","F2","F3"]);const u=c.getRawValues(),p=a.getRawValues();expect(u).toEqual(["Local font one"]),expect(p).toEqual(["Local font one","Global font two","Global font three"])}))})),describe("Ref",(function(){it("should get a string representation",(function(){const e=_primitives.Ref.get(4,2);expect(e.toString()).toEqual("4R2");const t=_primitives.Ref.get(4,0);expect(t.toString()).toEqual("4R")})),it("should retain the stored values",(function(){const e=4,t=2,i=_primitives.Ref.get(e,t);expect(i.num).toEqual(e),expect(i.gen).toEqual(t)})),it("should create only one object for a reference and cache it",(function(){const e=_primitives.Ref.get(4,2),t=_primitives.Ref.get(4,2),i=_primitives.Ref.get(5,2),n=_primitives.Ref.get(5,2);expect(e).toBe(t),expect(i).toBe(n),expect(e).not.toBe(i)}))})),describe("RefSet",(function(){it("should have a stored value",(function(){const e=_primitives.Ref.get(4,2),t=new _primitives.RefSet;t.put(e),expect(t.has(e)).toBeTruthy()})),it("should not have an unknown value",(function(){const e=_primitives.Ref.get(4,2),t=new _primitives.RefSet;expect(t.has(e)).toBeFalsy(),t.put(e);const i=_primitives.Ref.get(2,4);expect(t.has(i)).toBeFalsy()}))})),describe("RefSetCache",(function(){const e=_primitives.Ref.get(4,2),t=_primitives.Ref.get(5,2),i=_primitives.Name.get("foo"),n=_primitives.Name.get("bar");let o;beforeEach((function(){o=new _primitives.RefSetCache})),afterEach((function(){o=null})),it("should put, have and get a value",(function(){o.put(e,i),expect(o.has(e)).toBeTruthy(),expect(o.has(t)).toBeFalsy(),expect(o.get(e)).toBe(i)})),it("should put, have and get a value by alias",(function(){o.put(e,i),o.putAlias(t,e),expect(o.has(e)).toBeTruthy(),expect(o.has(t)).toBeTruthy(),expect(o.get(e)).toBe(i),expect(o.get(t)).toBe(i)})),it("should report the size of the cache",(function(){o.put(e,i),expect(o.size).toEqual(1),o.put(t,n),expect(o.size).toEqual(2)})),it("should clear the cache",(function(){o.put(e,i),expect(o.size).toEqual(1),o.clear(),expect(o.size).toEqual(0)})),it("should support iteration",(function(){o.put(e,i),o.put(t,n);const s=[];o.forEach((function(e){s.push(e)})),expect(s).toEqual([i,n])}))})),describe("isName",(function(){it("handles non-names",(function(){const e={};expect((0,_primitives.isName)(e)).toEqual(!1)})),it("handles names",(function(){const e=_primitives.Name.get("Font");expect((0,_primitives.isName)(e)).toEqual(!0)})),it("handles names with name check",(function(){const e=_primitives.Name.get("Font");expect((0,_primitives.isName)(e,"Font")).toEqual(!0),expect((0,_primitives.isName)(e,"Subtype")).toEqual(!1)})),it("handles *empty* names, with name check",(function(){const e=_primitives.Name.get("");expect((0,_primitives.isName)(e)).toEqual(!0),expect((0,_primitives.isName)(e,"")).toEqual(!0),expect((0,_primitives.isName)(e,"string")).toEqual(!1)}))})),describe("isCmd",(function(){it("handles non-commands",(function(){const e={};expect((0,_primitives.isCmd)(e)).toEqual(!1)})),it("handles commands",(function(){const e=_primitives.Cmd.get("BT");expect((0,_primitives.isCmd)(e)).toEqual(!0)})),it("handles commands with cmd check",(function(){const e=_primitives.Cmd.get("BT");expect((0,_primitives.isCmd)(e,"BT")).toEqual(!0),expect((0,_primitives.isCmd)(e,"ET")).toEqual(!1)}))})),describe("isDict",(function(){it("handles non-dictionaries",(function(){const e={};expect((0,_primitives.isDict)(e)).toEqual(!1)})),it("handles empty dictionaries with type check",(function(){const e=_primitives.Dict.empty;expect((0,_primitives.isDict)(e)).toEqual(!0),expect((0,_primitives.isDict)(e,"Page")).toEqual(!1)})),it("handles dictionaries with type check",(function(){const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Page")),expect((0,_primitives.isDict)(e,"Page")).toEqual(!0),expect((0,_primitives.isDict)(e,"Contents")).toEqual(!1)}))})),describe("isRef",(function(){it("handles non-refs",(function(){const e={};expect((0,_primitives.isRef)(e)).toEqual(!1)})),it("handles refs",(function(){const e=_primitives.Ref.get(1,0);expect((0,_primitives.isRef)(e)).toEqual(!0)}))})),describe("isRefsEqual",(function(){it("should handle Refs pointing to the same object",(function(){const e=_primitives.Ref.get(1,0),t=_primitives.Ref.get(1,0);expect((0,_primitives.isRefsEqual)(e,t)).toEqual(!0)})),it("should handle Refs pointing to different objects",(function(){const e=_primitives.Ref.get(1,0),t=_primitives.Ref.get(2,0);expect((0,_primitives.isRefsEqual)(e,t)).toEqual(!1)}))})),describe("isStream",(function(){it("handles non-streams",(function(){const e={};expect((0,_primitives.isStream)(e)).toEqual(!1)})),it("handles streams",(function(){const e=new _stream.StringStream("foo");expect((0,_primitives.isStream)(e)).toEqual(!0)}))}))}));