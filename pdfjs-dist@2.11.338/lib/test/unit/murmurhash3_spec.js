"use strict";var _murmurhash=require("../../core/murmurhash3.js");describe("MurmurHash3_64",(function(){it("instantiates without seed",(function(){const e=new _murmurhash.MurmurHash3_64;expect(e).toEqual(jasmine.any(_murmurhash.MurmurHash3_64))})),it("instantiates with seed",(function(){const e=new _murmurhash.MurmurHash3_64(1);expect(e).toEqual(jasmine.any(_murmurhash.MurmurHash3_64))}));const e="f61cfdbfdae0f65e",t="test",r=[116,101,115,116];it("correctly generates a hash from a string",(function(){const r=new _murmurhash.MurmurHash3_64;r.update(t),expect(r.hexdigest()).toEqual(e)})),it("correctly generates a hash from a Uint8Array",(function(){const t=new _murmurhash.MurmurHash3_64;t.update(new Uint8Array(r)),expect(t.hexdigest()).toEqual(e)})),it("correctly generates a hash from a Uint32Array",(function(){const t=new _murmurhash.MurmurHash3_64;t.update(new Uint32Array(new Uint8Array(r).buffer)),expect(t.hexdigest()).toEqual(e)})),it("changes the hash after update without seed",(function(){const e=new _murmurhash.MurmurHash3_64;e.update(t);const r=e.hexdigest();e.update(t);const a=e.hexdigest();expect(r).not.toEqual(a)})),it("changes the hash after update with seed",(function(){const e=new _murmurhash.MurmurHash3_64(1);e.update(t);const r=e.hexdigest();e.update(t);const a=e.hexdigest();expect(r).not.toEqual(a)})),it("generates correct hashes for TypedArrays which share the same underlying ArrayBuffer (issue 12533)",(function(){const e=new Uint8Array([0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]),t=new Uint8Array(e.buffer,0,10),r=new Uint8Array(e.buffer,10,10);expect(t).not.toEqual(r);const a=new _murmurhash.MurmurHash3_64;a.update(t);const u=a.hexdigest(),s=new _murmurhash.MurmurHash3_64;s.update(r);const n=s.hexdigest();expect(u).not.toEqual(n),expect(u).toEqual("a49de339cc5b0819"),expect(n).toEqual("f81a92d9e214ab35")}))}));