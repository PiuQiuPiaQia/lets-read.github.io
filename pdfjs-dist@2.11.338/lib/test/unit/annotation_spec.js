"use strict";var _annotation=require("../../core/annotation.js"),_util=require("../../shared/util.js"),_test_utils=require("./test_utils.js"),_api=require("../../display/api.js"),_primitives=require("../../core/primitives.js"),_parser=require("../../core/parser.js"),_evaluator=require("../../core/evaluator.js"),_stream=require("../../core/stream.js"),_worker=require("../../core/worker.js");describe("annotation",(function(){class t{constructor(t){this.docBaseUrl=t.docBaseUrl||null,this.pdfDocument={catalog:{acroForm:new _primitives.Dict}}}ensure(t,e,n){return new Promise((function(i){const a=t[e];i("function"===typeof a?a.apply(t,n):a)}))}ensureCatalog(t,e){return this.ensure(this.pdfDocument.catalog,t,e)}ensureDoc(t,e){return this.ensure(this.pdfDocument,t,e)}}const e=new _api.DefaultStandardFontDataFactory({baseUrl:_test_utils.STANDARD_FONT_DATA_URL});function n(){this.inputs=[]}let i,a,o;n.prototype={send(t,e){this.inputs.push({name:t,data:e})},sendWithPromise(t,n){return"FetchStandardFontData"!==t?Promise.reject(new Error(`Unsupported mock ${t}.`)):e.fetch(n)}},beforeAll((async function(){i=new t({docBaseUrl:null});const e=new _api.DefaultCMapReaderFactory({baseUrl:_test_utils.CMAP_PARAMS.cMapUrl,isCompressed:_test_utils.CMAP_PARAMS.cMapPacked}),s=new Map;s.set("UniJIS-UTF16-H",await e.fetch({name:"UniJIS-UTF16-H"})),s.set("Adobe-Japan1-UCS2",await e.fetch({name:"Adobe-Japan1-UCS2"})),a=(0,_test_utils.createIdFactory)(0),o=new _evaluator.PartialEvaluator({xref:new _test_utils.XRefMock,handler:new n,pageIndex:0,idFactory:(0,_test_utils.createIdFactory)(0),fontCache:new _primitives.RefSetCache,builtInCMapCache:s,standardFontDataCache:new Map})})),afterAll((function(){i=null,a=null,o=null})),describe("AnnotationFactory",(function(){it("should get id for annotation",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Link"));const e=_primitives.Ref.get(10,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.LINK),expect(o.id).toEqual("10R")})),it("should handle, and get fallback IDs for, annotations that are not indirect objects (issue 7569)",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Link"));const e=new _test_utils.XRefMock,n=(0,_test_utils.createIdFactory)(0),a=_annotation.AnnotationFactory.create(e,t,i,n).then((({data:t})=>{expect(t.annotationType).toEqual(_util.AnnotationType.LINK),expect(t.id).toEqual("annot_p0_1")})),o=_annotation.AnnotationFactory.create(e,t,i,n).then((({data:t})=>{expect(t.annotationType).toEqual(_util.AnnotationType.LINK),expect(t.id).toEqual("annot_p0_2")}));await Promise.all([a,o])})),it("should handle missing /Subtype",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot"));const e=_primitives.Ref.get(1,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toBeUndefined()}))})),describe("getQuadPoints",(function(){let t,e;beforeEach((function(){t=new _primitives.Dict,e=[]})),afterEach((function(){t=null,e=null})),it("should ignore missing quadpoints",(function(){expect((0,_annotation.getQuadPoints)(t,e)).toEqual(null)})),it("should ignore non-array values",(function(){t.set("QuadPoints","foo"),expect((0,_annotation.getQuadPoints)(t,e)).toEqual(null)})),it("should ignore arrays where the length is not a multiple of eight",(function(){t.set("QuadPoints",[1,2,3,4,5,6,7,8,9,10]),expect((0,_annotation.getQuadPoints)(t,e)).toEqual(null)})),it("should ignore quadpoints if one coordinate lies outside the rectangle",(function(){e=[10,10,20,20];const n=[[11,11,12,12,9,13,14,14],[11,11,12,12,13,9,14,14],[11,11,12,12,21,13,14,14],[11,11,12,12,13,21,14,14]];for(const i of n)t.set("QuadPoints",i),expect((0,_annotation.getQuadPoints)(t,e)).toEqual(null)})),it("should process quadpoints in the standard order",(function(){e=[10,10,20,20],t.set("QuadPoints",[10,20,20,20,10,10,20,10,11,19,19,19,11,11,19,11]),expect((0,_annotation.getQuadPoints)(t,e)).toEqual([[{x:10,y:20},{x:20,y:20},{x:10,y:10},{x:20,y:10}],[{x:11,y:19},{x:19,y:19},{x:11,y:11},{x:19,y:11}]])})),it("should normalize and process quadpoints in non-standard orders",(function(){e=[10,10,20,20];const n=[[10,20,20,20,20,10,10,10],[10,10,20,10,10,20,20,20],[10,10,20,10,20,20,10,20]];for(const i of n)t.set("QuadPoints",i),expect((0,_annotation.getQuadPoints)(t,e)).toEqual([[{x:10,y:20},{x:20,y:20},{x:10,y:10},{x:20,y:10}]])}))})),describe("Annotation",(function(){let t,e;beforeAll((function(){t=new _primitives.Dict,e=_primitives.Ref.get(1,0)})),afterAll((function(){t=e=null})),it("should set and get valid contents",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setContents("Foo bar baz"),expect(n._contents).toEqual({str:"Foo bar baz",dir:"ltr"})})),it("should not set and get invalid contents",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setContents(void 0),expect(n._contents).toEqual({str:"",dir:"ltr"})})),it("should set and get a valid modification date",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setModificationDate("D:20190422"),expect(n.modificationDate).toEqual("D:20190422")})),it("should not set and get an invalid modification date",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setModificationDate(void 0),expect(n.modificationDate).toEqual(null)})),it("should set and get flags",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setFlags(13),expect(n.hasFlag(_util.AnnotationFlag.INVISIBLE)).toEqual(!0),expect(n.hasFlag(_util.AnnotationFlag.NOZOOM)).toEqual(!0),expect(n.hasFlag(_util.AnnotationFlag.PRINT)).toEqual(!0),expect(n.hasFlag(_util.AnnotationFlag.READONLY)).toEqual(!1),expect(n.hasFlag(_util.AnnotationFlag.HIDDEN)).toEqual(!1)})),it("should be viewable and not printable by default",(function(){const n=new _annotation.Annotation({dict:t,ref:e});expect(n.viewable).toEqual(!0),expect(n.printable).toEqual(!1)})),it("should set and get a valid rectangle",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setRectangle([117,694,164.298,720]),expect(n.rectangle).toEqual([117,694,164.298,720])})),it("should not set and get an invalid rectangle",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setRectangle([117,694,164.298]),expect(n.rectangle).toEqual([0,0,0,0])})),it("should reject a color if it is not an array",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setColor("red"),expect(n.color).toEqual(new Uint8ClampedArray([0,0,0]))})),it("should set and get a transparent color",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setColor([]),expect(n.color).toEqual(null)})),it("should set and get a grayscale color",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setColor([.4]),expect(n.color).toEqual(new Uint8ClampedArray([102,102,102]))})),it("should set and get an RGB color",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setColor([0,0,1]),expect(n.color).toEqual(new Uint8ClampedArray([0,0,255]))})),it("should set and get a CMYK color",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setColor([.1,.92,.84,.02]),expect(n.color).toEqual(new Uint8ClampedArray([234,59,48]))})),it("should not set and get an invalid color",(function(){const n=new _annotation.Annotation({dict:t,ref:e});n.setColor([.4,.6]),expect(n.color).toEqual(new Uint8ClampedArray([0,0,0]))}))})),describe("AnnotationBorderStyle",(function(){it("should set and get a valid width",(function(){const t=new _annotation.AnnotationBorderStyle;t.setWidth(3),expect(t.width).toEqual(3)})),it("should not set and get an invalid width",(function(){const t=new _annotation.AnnotationBorderStyle;t.setWidth("three"),expect(t.width).toEqual(1)})),it("should set the width to zero, when the input is a `Name` (issue 10385)",(function(){const t=new _annotation.AnnotationBorderStyle;t.setWidth(_primitives.Name.get("0"));const e=new _annotation.AnnotationBorderStyle;e.setWidth(_primitives.Name.get("5")),expect(t.width).toEqual(0),expect(e.width).toEqual(0)})),it("should set and get a valid style",(function(){const t=new _annotation.AnnotationBorderStyle;t.setStyle(_primitives.Name.get("D")),expect(t.style).toEqual(_util.AnnotationBorderStyleType.DASHED)})),it("should not set and get an invalid style",(function(){const t=new _annotation.AnnotationBorderStyle;t.setStyle("Dashed"),expect(t.style).toEqual(_util.AnnotationBorderStyleType.SOLID)})),it("should set and get a valid dash array",(function(){const t=new _annotation.AnnotationBorderStyle;t.setDashArray([1,2,3]),expect(t.dashArray).toEqual([1,2,3])})),it("should not set and get an invalid dash array",(function(){const t=new _annotation.AnnotationBorderStyle;t.setDashArray([0,0]),expect(t.dashArray).toEqual([3])})),it("should set and get a valid horizontal corner radius",(function(){const t=new _annotation.AnnotationBorderStyle;t.setHorizontalCornerRadius(3),expect(t.horizontalCornerRadius).toEqual(3)})),it("should not set and get an invalid horizontal corner radius",(function(){const t=new _annotation.AnnotationBorderStyle;t.setHorizontalCornerRadius("three"),expect(t.horizontalCornerRadius).toEqual(0)})),it("should set and get a valid vertical corner radius",(function(){const t=new _annotation.AnnotationBorderStyle;t.setVerticalCornerRadius(3),expect(t.verticalCornerRadius).toEqual(3)})),it("should not set and get an invalid vertical corner radius",(function(){const t=new _annotation.AnnotationBorderStyle;t.setVerticalCornerRadius("three"),expect(t.verticalCornerRadius).toEqual(0)}))})),describe("MarkupAnnotation",(function(){let t,e;beforeAll((function(){t=new _primitives.Dict,e=_primitives.Ref.get(1,0)})),afterAll((function(){t=e=null})),it("should set and get a valid creation date",(function(){const n=new _annotation.MarkupAnnotation({dict:t,ref:e});n.setCreationDate("D:20190422"),expect(n.creationDate).toEqual("D:20190422")})),it("should not set and get an invalid creation date",(function(){const n=new _annotation.MarkupAnnotation({dict:t,ref:e});n.setCreationDate(void 0),expect(n.creationDate).toEqual(null)})),it("should not parse IRT/RT when not defined",(async function(){t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Text"));const n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.inReplyTo).toBeUndefined(),expect(o.replyType).toBeUndefined()})),it("should parse IRT and set default RT when not defined",(async function(){const t=_primitives.Ref.get(819,0),e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Text"));const n=_primitives.Ref.get(820,0),o=new _primitives.Dict;o.set("Type",_primitives.Name.get("Annot")),o.set("Subtype",_primitives.Name.get("Text")),o.set("IRT",t);const s=new _test_utils.XRefMock([{ref:t,data:e},{ref:n,data:o}]);e.assignXref(s),o.assignXref(s);const{data:r}=await _annotation.AnnotationFactory.create(s,n,i,a);expect(r.inReplyTo).toEqual(t.toString()),expect(r.replyType).toEqual("R")})),it("should parse IRT/RT for a group type",(async function(){const t=_primitives.Ref.get(819,0),e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Text")),e.set("T","ParentTitle"),e.set("Contents","ParentText"),e.set("CreationDate","D:20180423"),e.set("M","D:20190423"),e.set("C",[0,0,1]);const n=_primitives.Ref.get(820,0),o=new _primitives.Dict;o.set("Type",_primitives.Name.get("Annot")),o.set("Subtype",_primitives.Name.get("Popup")),o.set("Parent",t),e.set("Popup",n);const s=_primitives.Ref.get(821,0),r=new _primitives.Dict;r.set("Type",_primitives.Name.get("Annot")),r.set("Subtype",_primitives.Name.get("Text")),r.set("IRT",t),r.set("RT",_primitives.Name.get("Group")),r.set("T","ReplyTitle"),r.set("Contents","ReplyText"),r.set("CreationDate","D:20180523"),r.set("M","D:20190523"),r.set("C",[.4]);const c=new _test_utils.XRefMock([{ref:t,data:e},{ref:n,data:o},{ref:s,data:r}]);e.assignXref(c),o.assignXref(c),r.assignXref(c);const{data:p}=await _annotation.AnnotationFactory.create(c,s,i,a);expect(p.inReplyTo).toEqual(t.toString()),expect(p.replyType).toEqual("Group"),expect(p.titleObj).toEqual({str:"ParentTitle",dir:"ltr"}),expect(p.contentsObj).toEqual({str:"ParentText",dir:"ltr"}),expect(p.creationDate).toEqual("D:20180423"),expect(p.modificationDate).toEqual("D:20190423"),expect(p.color).toEqual(new Uint8ClampedArray([0,0,255])),expect(p.hasPopup).toEqual(!0)})),it("should parse IRT/RT for a reply type",(async function(){const t=_primitives.Ref.get(819,0),e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Text")),e.set("T","ParentTitle"),e.set("Contents","ParentText"),e.set("CreationDate","D:20180423"),e.set("M","D:20190423"),e.set("C",[0,0,1]);const n=_primitives.Ref.get(820,0),o=new _primitives.Dict;o.set("Type",_primitives.Name.get("Annot")),o.set("Subtype",_primitives.Name.get("Popup")),o.set("Parent",t),e.set("Popup",n);const s=_primitives.Ref.get(821,0),r=new _primitives.Dict;r.set("Type",_primitives.Name.get("Annot")),r.set("Subtype",_primitives.Name.get("Text")),r.set("IRT",t),r.set("RT",_primitives.Name.get("R")),r.set("T","ReplyTitle"),r.set("Contents","ReplyText"),r.set("CreationDate","D:20180523"),r.set("M","D:20190523"),r.set("C",[.4]);const c=new _test_utils.XRefMock([{ref:t,data:e},{ref:n,data:o},{ref:s,data:r}]);e.assignXref(c),o.assignXref(c),r.assignXref(c);const{data:p}=await _annotation.AnnotationFactory.create(c,s,i,a);expect(p.inReplyTo).toEqual(t.toString()),expect(p.replyType).toEqual("R"),expect(p.titleObj).toEqual({str:"ReplyTitle",dir:"ltr"}),expect(p.contentsObj).toEqual({str:"ReplyText",dir:"ltr"}),expect(p.creationDate).toEqual("D:20180523"),expect(p.modificationDate).toEqual("D:20190523"),expect(p.color).toEqual(new Uint8ClampedArray([102,102,102])),expect(p.hasPopup).toEqual(!1)}))})),describe("TextAnnotation",(function(){it("should not parse state model and state when not defined",(async function(){const t=_primitives.Ref.get(819,0),e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Text")),e.set("Contents","TestText");const n=_primitives.Ref.get(820,0),o=new _primitives.Dict;o.set("Type",_primitives.Name.get("Annot")),o.set("Subtype",_primitives.Name.get("Text")),o.set("IRT",t),o.set("RT",_primitives.Name.get("R")),o.set("Contents","ReplyText");const s=new _test_utils.XRefMock([{ref:t,data:e},{ref:n,data:o}]);e.assignXref(s),o.assignXref(s);const{data:r}=await _annotation.AnnotationFactory.create(s,n,i,a);expect(r.stateModel).toBeNull(),expect(r.state).toBeNull()})),it("should correctly parse state model and state when defined",(async function(){const t=_primitives.Ref.get(819,0),e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Text"));const n=_primitives.Ref.get(820,0),o=new _primitives.Dict;o.set("Type",_primitives.Name.get("Annot")),o.set("Subtype",_primitives.Name.get("Text")),o.set("IRT",t),o.set("RT",_primitives.Name.get("R")),o.set("StateModel","Review"),o.set("State","Rejected");const s=new _test_utils.XRefMock([{ref:t,data:e},{ref:n,data:o}]);e.assignXref(s),o.assignXref(s);const{data:r}=await _annotation.AnnotationFactory.create(s,n,i,a);expect(r.stateModel).toEqual("Review"),expect(r.state).toEqual("Rejected")}))})),describe("LinkAnnotation",(function(){it("should correctly parse a URI action",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Action")),t.set("S",_primitives.Name.get("URI")),t.set("URI","http://www.ctan.org/tex-archive/info/lshort");const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Link")),e.set("A",t);const n=_primitives.Ref.get(820,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.LINK),expect(s.url).toEqual("http://www.ctan.org/tex-archive/info/lshort"),expect(s.unsafeUrl).toEqual("http://www.ctan.org/tex-archive/info/lshort"),expect(s.dest).toBeUndefined()})),it("should correctly parse a URI action, where the URI entry is missing a protocol",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Action")),t.set("S",_primitives.Name.get("URI")),t.set("URI","www.hmrc.gov.uk");const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Link")),e.set("A",t);const n=_primitives.Ref.get(353,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.LINK),expect(s.url).toEqual("http://www.hmrc.gov.uk/"),expect(s.unsafeUrl).toEqual("www.hmrc.gov.uk"),expect(s.dest).toBeUndefined()})),it("should correctly parse a URI action, where the URI entry has an incorrect encoding (bug 1122280)",(async function(){const t=new _stream.StringStream("<<\n/Type /Action\n/S /URI\n/URI (http://www.example.com/\\303\\274\\303\\266\\303\\244)\n>>\n"),e=new _parser.Parser({lexer:new _parser.Lexer(t),xref:null}),n=e.getObj(),o=new _primitives.Dict;o.set("Type",_primitives.Name.get("Annot")),o.set("Subtype",_primitives.Name.get("Link")),o.set("A",n);const s=_primitives.Ref.get(8,0),r=new _test_utils.XRefMock([{ref:s,data:o}]),{data:c}=await _annotation.AnnotationFactory.create(r,s,i,a);expect(c.annotationType).toEqual(_util.AnnotationType.LINK),expect(c.url).toEqual(new URL((0,_util.stringToUTF8String)("http://www.example.com/\xc3\xbc\xc3\xb6\xc3\xa4")).href),expect(c.unsafeUrl).toEqual("http://www.example.com/\xc3\xbc\xc3\xb6\xc3\xa4"),expect(c.dest).toBeUndefined()})),it("should correctly parse a GoTo action",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Action")),t.set("S",_primitives.Name.get("GoTo")),t.set("D","page.157");const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Link")),e.set("A",t);const n=_primitives.Ref.get(798,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.LINK),expect(s.url).toBeUndefined(),expect(s.unsafeUrl).toBeUndefined(),expect(s.dest).toEqual("page.157")})),it("should correctly parse a GoToR action, where the FileSpec entry is a string containing a relative URL",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Action")),t.set("S",_primitives.Name.get("GoToR")),t.set("F","../../0013/001346/134685E.pdf"),t.set("D","4.3"),t.set("NewWindow",!0);const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Link")),e.set("A",t);const n=_primitives.Ref.get(489,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.LINK),expect(s.url).toBeUndefined(),expect(s.unsafeUrl).toEqual("../../0013/001346/134685E.pdf#4.3"),expect(s.dest).toBeUndefined(),expect(s.newWindow).toEqual(!0)})),it('should correctly parse a GoToR action, containing a relative URL, with the "docBaseUrl" parameter specified',(async function(){const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Action")),e.set("S",_primitives.Name.get("GoToR")),e.set("F","../../0013/001346/134685E.pdf"),e.set("D","4.3");const n=new _primitives.Dict;n.set("Type",_primitives.Name.get("Annot")),n.set("Subtype",_primitives.Name.get("Link")),n.set("A",e);const i=_primitives.Ref.get(489,0),o=new _test_utils.XRefMock([{ref:i,data:n}]),s=new t({docBaseUrl:"http://www.example.com/test/pdfs/qwerty.pdf"}),{data:r}=await _annotation.AnnotationFactory.create(o,i,s,a);expect(r.annotationType).toEqual(_util.AnnotationType.LINK),expect(r.url).toEqual("http://www.example.com/0013/001346/134685E.pdf#4.3"),expect(r.unsafeUrl).toEqual("../../0013/001346/134685E.pdf#4.3"),expect(r.dest).toBeUndefined()})),it("should correctly parse a GoToR action, with named destination",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Action")),t.set("S",_primitives.Name.get("GoToR")),t.set("F","http://www.example.com/test.pdf"),t.set("D","15");const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Link")),e.set("A",t);const n=_primitives.Ref.get(495,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.LINK),expect(s.url).toEqual("http://www.example.com/test.pdf#15"),expect(s.unsafeUrl).toEqual("http://www.example.com/test.pdf#15"),expect(s.dest).toBeUndefined(),expect(s.newWindow).toBeFalsy()})),it("should correctly parse a GoToR action, with explicit destination array",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Action")),t.set("S",_primitives.Name.get("GoToR")),t.set("F","http://www.example.com/test.pdf"),t.set("D",[14,_primitives.Name.get("XYZ"),null,298.043,null]);const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Link")),e.set("A",t);const n=_primitives.Ref.get(489,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.LINK),expect(s.url).toEqual(new URL('http://www.example.com/test.pdf#[14,{"name":"XYZ"},null,298.043,null]').href),expect(s.unsafeUrl).toEqual('http://www.example.com/test.pdf#[14,{"name":"XYZ"},null,298.043,null]'),expect(s.dest).toBeUndefined(),expect(s.newWindow).toBeFalsy()})),it('should correctly parse a Launch action, where the FileSpec dict contains a relative URL, with the "docBaseUrl" parameter specified',(async function(){const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("FileSpec")),e.set("F","Part II/Part II.pdf"),e.set("UF","Part II/Part II.pdf");const n=new _primitives.Dict;n.set("Type",_primitives.Name.get("Action")),n.set("S",_primitives.Name.get("Launch")),n.set("F",e),n.set("NewWindow",!0);const i=new _primitives.Dict;i.set("Type",_primitives.Name.get("Annot")),i.set("Subtype",_primitives.Name.get("Link")),i.set("A",n);const o=_primitives.Ref.get(88,0),s=new _test_utils.XRefMock([{ref:o,data:i}]),r=new t({docBaseUrl:"http://www.example.com/test/pdfs/qwerty.pdf"}),{data:c}=await _annotation.AnnotationFactory.create(s,o,r,a);expect(c.annotationType).toEqual(_util.AnnotationType.LINK),expect(c.url).toEqual(new URL("http://www.example.com/test/pdfs/Part II/Part II.pdf").href),expect(c.unsafeUrl).toEqual("Part II/Part II.pdf"),expect(c.dest).toBeUndefined(),expect(c.newWindow).toEqual(!0)})),it("should recover valid URLs from JavaScript actions having certain white-listed formats",(async function(){function t(t){const e=t.jsEntry,n=t.expectedUrl,o=t.expectedUnsafeUrl,s=t.expectedNewWindow,r=new _primitives.Dict;r.set("Type",_primitives.Name.get("Action")),r.set("S",_primitives.Name.get("JavaScript")),r.set("JS",e);const c=new _primitives.Dict;c.set("Type",_primitives.Name.get("Annot")),c.set("Subtype",_primitives.Name.get("Link")),c.set("A",r);const p=_primitives.Ref.get(46,0),l=new _test_utils.XRefMock([{ref:p,data:c}]);return _annotation.AnnotationFactory.create(l,p,i,a).then((({data:t})=>{expect(t.annotationType).toEqual(_util.AnnotationType.LINK),expect(t.url).toEqual(n),expect(t.unsafeUrl).toEqual(o),expect(t.dest).toBeUndefined(),expect(t.newWindow).toEqual(s)}))}const e=t({jsEntry:'function someFun() { return "qwerty"; } someFun();',expectedUrl:void 0,expectedUnsafeUrl:void 0,expectedNewWindow:void 0}),n=t({jsEntry:"window.open('http://www.example.com/test.pdf')",expectedUrl:new URL("http://www.example.com/test.pdf").href,expectedUnsafeUrl:"http://www.example.com/test.pdf",expectedNewWindow:!1}),o=t({jsEntry:new _stream.StringStream('app.launchURL("http://www.example.com/test.pdf", true)'),expectedUrl:new URL("http://www.example.com/test.pdf").href,expectedUnsafeUrl:"http://www.example.com/test.pdf",expectedNewWindow:!0});await Promise.all([e,n,o])})),it("should correctly parse a Named action",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Action")),t.set("S",_primitives.Name.get("Named")),t.set("N",_primitives.Name.get("GoToPage"));const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Link")),e.set("A",t);const n=_primitives.Ref.get(12,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.LINK),expect(s.url).toBeUndefined(),expect(s.unsafeUrl).toBeUndefined(),expect(s.action).toEqual("GoToPage")})),it("should correctly parse a simple Dest",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Link")),t.set("Dest",_primitives.Name.get("LI0"));const e=_primitives.Ref.get(583,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.LINK),expect(o.url).toBeUndefined(),expect(o.unsafeUrl).toBeUndefined(),expect(o.dest).toEqual("LI0")})),it("should correctly parse a simple Dest, with explicit destination array",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Link")),t.set("Dest",[_primitives.Ref.get(17,0),_primitives.Name.get("XYZ"),0,841.89,null]);const e=_primitives.Ref.get(10,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.LINK),expect(o.url).toBeUndefined(),expect(o.unsafeUrl).toBeUndefined(),expect(o.dest).toEqual([_primitives.Ref.get(17,0),_primitives.Name.get("XYZ"),0,841.89,null])})),it("should correctly parse a Dest, which violates the specification by containing a dictionary",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Action")),t.set("S",_primitives.Name.get("GoTo")),t.set("D","page.157");const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Link")),e.set("Dest",t);const n=_primitives.Ref.get(798,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.LINK),expect(s.url).toBeUndefined(),expect(s.unsafeUrl).toBeUndefined(),expect(s.dest).toEqual("page.157")})),it("should not set quadpoints if not defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Link"));const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.LINK),expect(o.quadPoints).toBeUndefined()})),it("should set quadpoints if defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Link")),t.set("Rect",[10,10,20,20]),t.set("QuadPoints",[10,20,20,20,10,10,20,10]);const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.LINK),expect(o.quadPoints).toEqual([[{x:10,y:20},{x:20,y:20},{x:10,y:10},{x:20,y:10}]])}))})),describe("WidgetAnnotation",(function(){let t;beforeEach((function(){t=new _primitives.Dict,t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Widget"))})),afterEach((function(){t=null})),it("should handle unknown field names",(async function(){const e=_primitives.Ref.get(20,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.fieldName).toEqual("")})),it("should construct the field name when there are no ancestors",(async function(){t.set("T","foo");const e=_primitives.Ref.get(21,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.fieldName).toEqual("foo")})),it("should construct the field name when there are ancestors",(async function(){const e=new _primitives.Dict;e.set("T","foo");const n=new _primitives.Dict;n.set("Parent",e),n.set("T","bar"),t.set("Parent",n),t.set("T","baz");const o=_primitives.Ref.get(22,0),s=new _test_utils.XRefMock([{ref:o,data:t}]),{data:r}=await _annotation.AnnotationFactory.create(s,o,i,a);expect(r.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(r.fieldName).toEqual("foo.bar.baz")})),it("should construct the field name if a parent is not a dictionary (issue 8143)",(async function(){const e=new _primitives.Dict;e.set("Parent",null),e.set("T","foo"),t.set("Parent",e),t.set("T","bar");const n=_primitives.Ref.get(22,0),o=new _test_utils.XRefMock([{ref:n,data:t}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(s.fieldName).toEqual("foo.bar")}))})),describe("TextWidgetAnnotation",(function(){let t,e,n;beforeEach((function(){t=new _primitives.Dict,t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Widget")),t.set("FT",_primitives.Name.get("Tx"));const i=new _primitives.Dict;i.set("BaseFont",_primitives.Name.get("Helvetica")),i.set("Type",_primitives.Name.get("Font")),i.set("Subtype",_primitives.Name.get("Type1"));const a=new _primitives.Dict;a.set("BaseFont",_primitives.Name.get("MSGothic")),a.set("Type",_primitives.Name.get("Font")),a.set("Subtype",_primitives.Name.get("Type0")),a.set("Encoding",_primitives.Name.get("UniJIS-UTF16-H")),a.set("Name",_primitives.Name.get("MSGothic"));const o=new _primitives.Dict;o.set("Ordering","Japan1"),o.set("Registry","Adobe"),o.set("Supplement","5");const s=new _primitives.Dict;s.set("FontName",_primitives.Name.get("MSGothic")),s.set("CapHeight","680");const r=new _primitives.Dict;r.set("BaseFont",_primitives.Name.get("MSGothic")),r.set("CIDSystemInfo",o),r.set("Subtype",_primitives.Name.get("CIDFontType2")),r.set("Type",_primitives.Name.get("Font")),r.set("FontDescriptor",s),a.set("DescendantFonts",[r]);const c=_primitives.Ref.get(314,0),p=_primitives.Ref.get(159,0);e={ref:c,data:i},n={ref:p,data:a};const l=new _primitives.Dict,u=new _primitives.Dict;u.set("Helv",c),l.set("Font",u),t.set("DA","/Helv 5 Tf"),t.set("DR",l),t.set("Rect",[0,0,32,10])})),afterEach((function(){t=e=n=null})),it("should handle unknown text alignment, maximum length and flags",(async function(){t.set("DV","foo");const e=_primitives.Ref.get(124,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.textAlignment).toEqual(null),expect(o.maxLen).toEqual(null),expect(o.readOnly).toEqual(!1),expect(o.hidden).toEqual(!1),expect(o.multiLine).toEqual(!1),expect(o.comb).toEqual(!1),expect(o.defaultFieldValue).toEqual("foo")})),it("should not set invalid text alignment, maximum length and flags",(async function(){t.set("Q","center"),t.set("MaxLen","five"),t.set("Ff","readonly");const e=_primitives.Ref.get(43,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.textAlignment).toEqual(null),expect(o.maxLen).toEqual(null),expect(o.readOnly).toEqual(!1),expect(o.hidden).toEqual(!1),expect(o.multiLine).toEqual(!1),expect(o.comb).toEqual(!1)})),it("should set valid text alignment, maximum length and flags",(async function(){t.set("Q",1),t.set("MaxLen",20),t.set("Ff",_util.AnnotationFieldFlag.READONLY+_util.AnnotationFieldFlag.MULTILINE);const e=_primitives.Ref.get(84,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.textAlignment).toEqual(1),expect(o.maxLen).toEqual(20),expect(o.readOnly).toEqual(!0),expect(o.hidden).toEqual(!1),expect(o.multiLine).toEqual(!0)})),it("should reject comb fields without a maximum length",(async function(){t.set("Ff",_util.AnnotationFieldFlag.COMB);const e=_primitives.Ref.get(46,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.comb).toEqual(!1)})),it("should accept comb fields with a maximum length",(async function(){t.set("MaxLen",20),t.set("Ff",_util.AnnotationFieldFlag.COMB);const e=_primitives.Ref.get(46,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.comb).toEqual(!0)})),it("should only accept comb fields when the flags are valid",(async function(){const e=[_util.AnnotationFieldFlag.MULTILINE,_util.AnnotationFieldFlag.PASSWORD,_util.AnnotationFieldFlag.FILESELECT];let n=_util.AnnotationFieldFlag.COMB+_util.AnnotationFieldFlag.MULTILINE+_util.AnnotationFieldFlag.PASSWORD+_util.AnnotationFieldFlag.FILESELECT,o=Promise.resolve();for(let s=0,r=e.length;s<=r;s++)o=o.then((()=>{t.set("MaxLen",20),t.set("Ff",n);const o=_primitives.Ref.get(93,0),s=new _test_utils.XRefMock([{ref:o,data:t}]);return _annotation.AnnotationFactory.create(s,o,i,a).then((({data:t})=>{expect(t.annotationType).toEqual(_util.AnnotationType.WIDGET);const i=0===e.length;expect(t.comb).toEqual(i),i||(n-=e.pop())}))}));await o})),it("should render regular text for printing",(async function(){const n=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:n,data:t},e]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,n,i,a),p=new Map;p.set(c.data.id,{value:"test\\print"});const l=await c._getAppearance(o,r,p);expect(l).toEqual("/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (test\\\\print) Tj ET Q EMC")})),it("should render regular text in Japanese for printing",(async function(){t.get("DR").get("Font").set("Goth",n.ref),t.set("DA","/Goth 5 Tf");const e=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:e,data:t},n]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,e,i,a),p=new Map;p.set(c.data.id,{value:"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\u306e"});const l=await c._getAppearance(o,r,p),u="0S0\x930k0a0oN\x16uL0n";expect(l).toEqual(`/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (${u}) Tj ET Q EMC`)})),it("should render regular text for printing using normal appearance",(async function(){const n=_primitives.Ref.get(271,0),s=new _primitives.Dict,r=new _primitives.Dict,c=new _stream.StringStream("0.1 0.2 0.3 rg");c.dict=r,s.set("N",c),t.set("AP",s);const p=new _test_utils.XRefMock([{ref:n,data:t},e]),l=new _worker.WorkerTask("test print");o.xref=p;const u=await _annotation.AnnotationFactory.create(p,n,i,a),d=new Map,_=await u.getOperatorList(o,l,!1,d);expect(_.argsArray.length).toEqual(3),expect(_.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.setFillRGBColor,_util.OPS.endAnnotation]),expect(_.argsArray[0]).toEqual(["271R",[0,0,32,10],[32,0,0,10,0,0],[1,0,0,1,0,0]]),expect(_.argsArray[1]).toEqual(new Uint8ClampedArray([26,51,76]))})),it("should render auto-sized text for printing",(async function(){t.set("DA","/Helv 0 Tf");const n=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:n,data:t},e]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,n,i,a),p=new Map;p.set(c.data.id,{value:"test (print)"});const l=await c._getAppearance(o,r,p);expect(l).toEqual("/Tx BMC q BT /Helv 8 Tf 0 g 1 0 0 1 0 0 Tm 2.00 2.00 Td (test \\(print\\)) Tj ET Q EMC")})),it("should render auto-sized text in Japanese for printing",(async function(){t.get("DR").get("Font").set("Goth",n.ref),t.set("DA","/Goth 0 Tf");const e=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:e,data:t},n]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,e,i,a),p=new Map;p.set(c.data.id,{value:"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\u306e"});const l=await c._getAppearance(o,r,p),u="0S0\x930k0a0oN\x16uL0n";expect(l).toEqual(`/Tx BMC q BT /Goth 8 Tf 0 g 1 0 0 1 0 0 Tm 2.00 2.00 Td (${u}) Tj ET Q EMC`)})),it("should not render a password for printing",(async function(){t.set("Ff",_util.AnnotationFieldFlag.PASSWORD);const n=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:n,data:t},e]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,n,i,a),p=new Map;p.set(c.data.id,{value:"mypassword"});const l=await c._getAppearance(o,r,p);expect(l).toEqual(null)})),it("should render multiline text for printing",(async function(){t.set("Ff",_util.AnnotationFieldFlag.MULTILINE);const n=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:n,data:t},e]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,n,i,a),p=new Map;p.set(c.data.id,{value:"a aa aaa aaaa aaaaa aaaaaa pneumonoultramicroscopicsilicovolcanoconiosis"});const l=await c._getAppearance(o,r,p);expect(l).toEqual("/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 10 Tm 2.00 -5.00 Td (a aa aaa ) Tj\n0.00 -5.00 Td (aaaa aaaaa ) Tj\n0.00 -5.00 Td (aaaaaa ) Tj\n0.00 -5.00 Td (pneumonoultr) Tj\n0.00 -5.00 Td (amicroscopi) Tj\n0.00 -5.00 Td (csilicovolca) Tj\n0.00 -5.00 Td (noconiosis) Tj ET Q EMC")})),it("should render multiline text in Japanese for printing",(async function(){t.set("Ff",_util.AnnotationFieldFlag.MULTILINE),t.get("DR").get("Font").set("Goth",n.ref),t.set("DA","/Goth 5 Tf");const e=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:e,data:t},n]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,e,i,a),p=new Map;p.set(c.data.id,{value:"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\u306e"});const l=await c._getAppearance(o,r,p);expect(l).toEqual("/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 10 Tm 2.00 -5.00 Td (0S0\x930k0a0o) Tj\n0.00 -5.00 Td (N\x16uL0n) Tj ET Q EMC")})),it("should render multiline text with various EOL for printing",(async function(){t.set("Ff",_util.AnnotationFieldFlag.MULTILINE),t.set("Rect",[0,0,128,10]);const n=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:n,data:t},e]),r=new _worker.WorkerTask("test print");o.xref=s;const c="/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 10 Tm 2.00 -5.00 Td (Lorem ipsum dolor sit amet, consectetur adipiscing elit.) Tj\n0.00 -5.00 Td (Aliquam vitae felis ac lectus bibendum ultricies quis non) Tj\n0.00 -5.00 Td ( diam.) Tj\n0.00 -5.00 Td (Morbi id porttitor quam, a iaculis dui.) Tj\n0.00 -5.00 Td (Pellentesque habitant morbi tristique senectus et netus ) Tj\n0.00 -5.00 Td (et malesuada fames ac turpis egestas.) Tj\n0.00 -5.00 Td () Tj\n0.00 -5.00 Td () Tj\n0.00 -5.00 Td (Nulla consectetur, ligula in tincidunt placerat, velit ) Tj\n0.00 -5.00 Td (augue consectetur orci, sed mattis libero nunc ut massa.) Tj\n0.00 -5.00 Td (Etiam facilisis tempus interdum.) Tj ET Q EMC",p=await _annotation.AnnotationFactory.create(s,n,i,a),l=new Map;l.set(p.data.id,{value:"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\rAliquam vitae felis ac lectus bibendum ultricies quis non diam.\nMorbi id porttitor quam, a iaculis dui.\r\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n\r\n\rNulla consectetur, ligula in tincidunt placerat, velit augue consectetur orci, sed mattis libero nunc ut massa.\rEtiam facilisis tempus interdum."});const u=await p._getAppearance(o,r,l);expect(u).toEqual(c)})),it("should render comb for printing",(async function(){t.set("Ff",_util.AnnotationFieldFlag.COMB),t.set("MaxLen",4);const n=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:n,data:t},e]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,n,i,a),p=new Map;p.set(c.data.id,{value:"aa(aa)a\\"});const l=await c._getAppearance(o,r,p);expect(l).toEqual("/Tx BMC q BT /Helv 5 Tf 1 0 0 1 2 2 Tm (a) Tj 8.00 0 Td (a) Tj 8.00 0 Td (\\() Tj 8.00 0 Td (a) Tj 8.00 0 Td (a) Tj 8.00 0 Td (\\)) Tj 8.00 0 Td (a) Tj 8.00 0 Td (\\\\) Tj ET Q EMC")})),it("should render comb with Japanese text for printing",(async function(){t.set("Ff",_util.AnnotationFieldFlag.COMB),t.set("MaxLen",4),t.get("DR").get("Font").set("Goth",n.ref),t.set("DA","/Goth 5 Tf"),t.set("Rect",[0,0,32,10]);const e=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:e,data:t},n]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,e,i,a),p=new Map;p.set(c.data.id,{value:"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\u306e"});const l=await c._getAppearance(o,r,p);expect(l).toEqual("/Tx BMC q BT /Goth 5 Tf 1 0 0 1 2 2 Tm (0S) Tj 8.00 0 Td (0\x93) Tj 8.00 0 Td (0k) Tj 8.00 0 Td (0a) Tj 8.00 0 Td (0o) Tj 8.00 0 Td (N\x16) Tj 8.00 0 Td (uL) Tj 8.00 0 Td (0n) Tj ET Q EMC")})),it("should save text",(async function(){const n=_primitives.Ref.get(123,0),s=new _test_utils.XRefMock([{ref:n,data:t},e]);o.xref=s;const r=new _worker.WorkerTask("test save"),c=await _annotation.AnnotationFactory.create(s,n,i,a),p=new Map;p.set(c.data.id,{value:"hello world"});const l=await c.save(o,r,p);expect(l.length).toEqual(2);const[u,d]=l;expect(u.ref).toEqual(_primitives.Ref.get(123,0)),expect(d.ref).toEqual(_primitives.Ref.get(2,0)),u.data=u.data.replace(/\(D:\d+\)/,"(date)"),expect(u.data).toEqual("123 0 obj\n<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Helv 5 Tf) /DR << /Font << /Helv 314 0 R>>>> /Rect [0 0 32 10] /V (hello world) /AP << /N 2 0 R>> /M (date)>>\nendobj\n"),expect(d.data).toEqual("2 0 obj\n<< /Length 77 /Subtype /Form /Resources << /Font << /Helv 314 0 R>>>> /BBox [0 0 32 10]>> stream\n/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (hello world) Tj ET Q EMC\nendstream\nendobj\n")})),it("should get field object for usage in JS sandbox",(async function(){const e=_primitives.Ref.get(123,0),n=_primitives.Ref.get(141,0),s=_primitives.Ref.get(262,0),r=_primitives.Ref.get(314,0),c=_primitives.Ref.get(271,0),p=_primitives.Ref.get(577,0),l=_primitives.Ref.get(413,0),u=new _primitives.Dict,d=new _primitives.Dict,_=new _primitives.Dict,f=new _primitives.Dict,m=new _primitives.Dict,y=new _primitives.Dict,w=new _test_utils.XRefMock([{ref:e,data:t},{ref:n,data:u},{ref:s,data:d},{ref:r,data:_},{ref:l,data:y},{ref:c,data:f},{ref:p,data:m}]),g=_primitives.Name.get("JavaScript"),v=new _primitives.Dict,x=new _primitives.Dict;x.set("JS","hello()"),x.set("S",g),v.set("E",x),u.set("JS","world()"),u.set("S",g),u.set("Next",[r,c,p,n]),_.set("JS","olleh()"),_.set("S",g),_.set("Next",l),y.set("JS","foo()"),y.set("S",g),y.set("Next",r),f.set("JS","dlrow()"),f.set("S",g),f.set("Next",n),m.set("JS","oof()"),m.set("S",g),d.set("JS","bar()"),d.set("S",g),d.set("Next",s),v.set("D",s),v.set("X",n),t.set("AA",v),o.xref=w;const T=await _annotation.AnnotationFactory.create(w,e,i,a),A=await T.getFieldObject(),h=A.actions;expect(h["Mouse Enter"]).toEqual(["hello()"]),expect(h["Mouse Exit"]).toEqual(["world()","olleh()","foo()","dlrow()","oof()"]),expect(h["Mouse Down"]).toEqual(["bar()"])})),it("should save Japanese text",(async function(){t.get("DR").get("Font").set("Goth",n.ref),t.set("DA","/Goth 5 Tf");const e=_primitives.Ref.get(123,0),s=new _test_utils.XRefMock([{ref:e,data:t},n]);o.xref=s;const r=new _worker.WorkerTask("test save"),c=await _annotation.AnnotationFactory.create(s,e,i,a),p=new Map;p.set(c.data.id,{value:"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\u306e"});const l=await c.save(o,r,p),u="0S0\x930k0a0oN\x16uL0n";expect(l.length).toEqual(2);const[d,_]=l;expect(d.ref).toEqual(_primitives.Ref.get(123,0)),expect(_.ref).toEqual(_primitives.Ref.get(2,0)),d.data=d.data.replace(/\(D:\d+\)/,"(date)"),expect(d.data).toEqual(`123 0 obj\n<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Goth 5 Tf) /DR << /Font << /Helv 314 0 R /Goth 159 0 R>>>> /Rect [0 0 32 10] /V (\xfe\xff${u}) /AP << /N 2 0 R>> /M (date)>>\nendobj\n`),expect(_.data).toEqual(`2 0 obj\n<< /Length 82 /Subtype /Form /Resources << /Font << /Helv 314 0 R /Goth 159 0 R>>>> /BBox [0 0 32 10]>> stream\n/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (${u}) Tj ET Q EMC\nendstream\nendobj\n`)}))})),describe("ButtonWidgetAnnotation",(function(){let t;beforeEach((function(){t=new _primitives.Dict,t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Widget")),t.set("FT",_primitives.Name.get("Btn"))})),afterEach((function(){t=null})),it("should handle checkboxes with export value",(async function(){t.set("V",_primitives.Name.get("Checked")),t.set("DV",_primitives.Name.get("Off"));const e=new _primitives.Dict,n=new _primitives.Dict;n.set("Off",0),n.set("Checked",1),e.set("N",n),t.set("AP",e);const o=_primitives.Ref.get(124,0),s=new _test_utils.XRefMock([{ref:o,data:t}]),{data:r}=await _annotation.AnnotationFactory.create(s,o,i,a);expect(r.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(r.checkBox).toEqual(!0),expect(r.fieldValue).toEqual("Checked"),expect(r.defaultFieldValue).toEqual("Off"),expect(r.radioButton).toEqual(!1),expect(r.exportValue).toEqual("Checked")})),it("should handle checkboxes without export value",(async function(){t.set("V",_primitives.Name.get("Checked")),t.set("DV",_primitives.Name.get("Off"));const e=_primitives.Ref.get(124,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.checkBox).toEqual(!0),expect(o.fieldValue).toEqual("Checked"),expect(o.defaultFieldValue).toEqual("Off"),expect(o.radioButton).toEqual(!1)})),it("should handle checkboxes without /Off appearance",(async function(){t.set("V",_primitives.Name.get("Checked")),t.set("DV",_primitives.Name.get("Off"));const e=new _primitives.Dict,n=new _primitives.Dict;n.set("Checked",1),e.set("N",n),t.set("AP",e);const o=_primitives.Ref.get(124,0),s=new _test_utils.XRefMock([{ref:o,data:t}]),{data:r}=await _annotation.AnnotationFactory.create(s,o,i,a);expect(r.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(r.checkBox).toEqual(!0),expect(r.fieldValue).toEqual("Checked"),expect(r.defaultFieldValue).toEqual("Off"),expect(r.radioButton).toEqual(!1),expect(r.exportValue).toEqual("Checked")})),it("should render checkbox with fallback font for printing",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict,s=new _primitives.Dict,r=new _primitives.Dict,c=new _stream.StringStream("/ 12 Tf (4) Tj");c.dict=s;const p=new _stream.StringStream("");p.dict=r,s.set("BBox",[0,0,8,8]),s.set("FormType",1),s.set("Matrix",[1,0,0,1,0,0]),n.set("Checked",c),n.set("Off",p),e.set("N",n),t.set("AP",e);const l=_primitives.Ref.get(124,0),u=new _test_utils.XRefMock([{ref:l,data:t}]),d=new _worker.WorkerTask("test print"),_=o.clone({ignoreErrors:!0}),f=await _annotation.AnnotationFactory.create(u,l,i,a),m=new Map;m.set(f.data.id,{value:!0});const y=await f.getOperatorList(_,d,!1,m);expect(y.argsArray.length).toEqual(5),expect(y.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.dependency,_util.OPS.setFont,_util.OPS.showText,_util.OPS.endAnnotation]),expect(y.argsArray[0]).toEqual(["124R",[0,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0]]),expect(y.argsArray[3][0][0].unicode).toEqual("4")})),it("should render checkboxes for printing",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict,s=new _primitives.Dict,r=new _primitives.Dict,c=new _stream.StringStream("0.1 0.2 0.3 rg");c.dict=s;const p=new _stream.StringStream("0.3 0.2 0.1 rg");p.dict=r,s.set("BBox",[0,0,8,8]),s.set("FormType",1),s.set("Matrix",[1,0,0,1,0,0]),n.set("Checked",c),n.set("Off",p),e.set("N",n),t.set("AP",e);const l=_primitives.Ref.get(124,0),u=new _test_utils.XRefMock([{ref:l,data:t}]),d=new _worker.WorkerTask("test print"),_=await _annotation.AnnotationFactory.create(u,l,i,a),f=new Map;f.set(_.data.id,{value:!0});let m=await _.getOperatorList(o,d,!1,f);expect(m.argsArray.length).toEqual(3),expect(m.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.setFillRGBColor,_util.OPS.endAnnotation]),expect(m.argsArray[0]).toEqual(["124R",[0,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0]]),expect(m.argsArray[1]).toEqual(new Uint8ClampedArray([26,51,76])),f.set(_.data.id,{value:!1}),m=await _.getOperatorList(o,d,!1,f),expect(m.argsArray.length).toEqual(3),expect(m.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.setFillRGBColor,_util.OPS.endAnnotation]),expect(m.argsArray[0]).toEqual(["124R",[0,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0]]),expect(m.argsArray[1]).toEqual(new Uint8ClampedArray([76,51,26]))})),it("should render checkboxes for printing twice",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict,s=new _primitives.Dict,r=new _primitives.Dict,c=new _stream.StringStream("0.1 0.2 0.3 rg");c.dict=s;const p=new _stream.StringStream("0.3 0.2 0.1 rg");p.dict=r,s.set("BBox",[0,0,8,8]),s.set("FormType",1),s.set("Matrix",[1,0,0,1,0,0]),n.set("Checked",c),n.set("Off",p),e.set("N",n),t.set("AP",e),t.set("AS",_primitives.Name.get("Off"));const l=_primitives.Ref.get(1249,0),u=new _test_utils.XRefMock([{ref:l,data:t}]),d=new _worker.WorkerTask("test print"),_=await _annotation.AnnotationFactory.create(u,l,i,a),f=new Map;for(let t=0;t<2;t++){f.set(_.data.id,{value:!0});const t=await _.getOperatorList(o,d,!1,f);expect(t.argsArray.length).toEqual(3),expect(t.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.setFillRGBColor,_util.OPS.endAnnotation]),expect(t.argsArray[0]).toEqual(["1249R",[0,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0]]),expect(t.argsArray[1]).toEqual(new Uint8ClampedArray([26,51,76]))}})),it("should render checkboxes for printing using normal appearance",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict,s=new _primitives.Dict,r=new _primitives.Dict,c=new _stream.StringStream("0.1 0.2 0.3 rg");c.dict=s;const p=new _stream.StringStream("0.3 0.2 0.1 rg");p.dict=r,s.set("BBox",[0,0,8,8]),s.set("FormType",1),s.set("Matrix",[1,0,0,1,0,0]),n.set("Checked",c),n.set("Off",p),e.set("N",n),t.set("AP",e),t.set("AS",_primitives.Name.get("Checked"));const l=_primitives.Ref.get(124,0),u=new _test_utils.XRefMock([{ref:l,data:t}]),d=new _worker.WorkerTask("test print"),_=await _annotation.AnnotationFactory.create(u,l,i,a),f=new Map,m=await _.getOperatorList(o,d,!1,f);expect(m.argsArray.length).toEqual(3),expect(m.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.setFillRGBColor,_util.OPS.endAnnotation]),expect(m.argsArray[0]).toEqual(["124R",[0,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0]]),expect(m.argsArray[1]).toEqual(new Uint8ClampedArray([26,51,76]))})),it("should save checkboxes",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict;n.set("Checked",_primitives.Ref.get(314,0)),n.set("Off",_primitives.Ref.get(271,0)),e.set("N",n),t.set("AP",e),t.set("V",_primitives.Name.get("Off"));const s=_primitives.Ref.get(123,0),r=new _test_utils.XRefMock([{ref:s,data:t}]);o.xref=r;const c=new _worker.WorkerTask("test save"),p=await _annotation.AnnotationFactory.create(r,s,i,a),l=new Map;l.set(p.data.id,{value:!0});const[u]=await p.save(o,c,l);u.data=u.data.replace(/\(D:\d+\)/,"(date)"),expect(u.ref).toEqual(_primitives.Ref.get(123,0)),expect(u.data).toEqual("123 0 obj\n<< /Type /Annot /Subtype /Widget /FT /Btn /AP << /N << /Checked 314 0 R /Off 271 0 R>>>> /V /Checked /AS /Checked /M (date)>>\nendobj\n"),l.set(p.data.id,{value:!1});const d=await p.save(o,c,l);expect(d).toEqual(null)})),it("should handle radio buttons with a field value",(async function(){const e=new _primitives.Dict;e.set("V",_primitives.Name.get("1"));const n=new _primitives.Dict;n.set("2",null);const o=new _primitives.Dict;o.set("N",n),t.set("Ff",_util.AnnotationFieldFlag.RADIO),t.set("Parent",e),t.set("AP",o);const s=_primitives.Ref.get(124,0),r=new _test_utils.XRefMock([{ref:s,data:t}]),{data:c}=await _annotation.AnnotationFactory.create(r,s,i,a);expect(c.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(c.checkBox).toEqual(!1),expect(c.radioButton).toEqual(!0),expect(c.fieldValue).toEqual("1"),expect(c.buttonValue).toEqual("2")})),it("should handle radio buttons with a field value that's not an ASCII string",(async function(){const e=new _primitives.Dict;e.set("V",_primitives.Name.get("\x91I=\x91\xf0\x93\xe0\x97e3"));const n=new _primitives.Dict;n.set("\x91I=\x91\xf0\x93\xe0\x97e3",null);const o=new _primitives.Dict;o.set("N",n),t.set("Ff",_util.AnnotationFieldFlag.RADIO),t.set("Parent",e),t.set("AP",o);const s=_primitives.Ref.get(124,0),r=new _test_utils.XRefMock([{ref:s,data:t}]),{data:c}=await _annotation.AnnotationFactory.create(r,s,i,a);expect(c.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(c.checkBox).toEqual(!1),expect(c.radioButton).toEqual(!0),expect(c.fieldValue).toEqual("\u201aI=\u201a\xf0\ufb01\xe0\u0160e3"),expect(c.buttonValue).toEqual("\u201aI=\u201a\xf0\ufb01\xe0\u0160e3")})),it("should handle radio buttons without a field value",(async function(){const e=new _primitives.Dict;e.set("2",null);const n=new _primitives.Dict;n.set("N",e),t.set("Ff",_util.AnnotationFieldFlag.RADIO),t.set("AP",n);const o=_primitives.Ref.get(124,0),s=new _test_utils.XRefMock([{ref:o,data:t}]),{data:r}=await _annotation.AnnotationFactory.create(s,o,i,a);expect(r.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(r.checkBox).toEqual(!1),expect(r.radioButton).toEqual(!0),expect(r.fieldValue).toEqual(null),expect(r.buttonValue).toEqual("2")})),it("should render radio buttons for printing",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict,s=new _primitives.Dict,r=new _primitives.Dict,c=new _stream.StringStream("0.1 0.2 0.3 rg");c.dict=s;const p=new _stream.StringStream("0.3 0.2 0.1 rg");p.dict=r,s.set("BBox",[0,0,8,8]),s.set("FormType",1),s.set("Matrix",[1,0,0,1,0,0]),n.set("Checked",c),n.set("Off",p),e.set("N",n),t.set("Ff",_util.AnnotationFieldFlag.RADIO),t.set("AP",e);const l=_primitives.Ref.get(124,0),u=new _test_utils.XRefMock([{ref:l,data:t}]),d=new _worker.WorkerTask("test print"),_=await _annotation.AnnotationFactory.create(u,l,i,a),f=new Map;f.set(_.data.id,{value:!0});let m=await _.getOperatorList(o,d,!1,f);expect(m.argsArray.length).toEqual(3),expect(m.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.setFillRGBColor,_util.OPS.endAnnotation]),expect(m.argsArray[0]).toEqual(["124R",[0,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0]]),expect(m.argsArray[1]).toEqual(new Uint8ClampedArray([26,51,76])),f.set(_.data.id,{value:!1}),m=await _.getOperatorList(o,d,!1,f),expect(m.argsArray.length).toEqual(3),expect(m.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.setFillRGBColor,_util.OPS.endAnnotation]),expect(m.argsArray[0]).toEqual(["124R",[0,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0]]),expect(m.argsArray[1]).toEqual(new Uint8ClampedArray([76,51,26]))})),it("should render radio buttons for printing using normal appearance",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict,s=new _primitives.Dict,r=new _primitives.Dict,c=new _stream.StringStream("0.1 0.2 0.3 rg");c.dict=s;const p=new _stream.StringStream("0.3 0.2 0.1 rg");p.dict=r,s.set("BBox",[0,0,8,8]),s.set("FormType",1),s.set("Matrix",[1,0,0,1,0,0]),n.set("Checked",c),n.set("Off",p),e.set("N",n),t.set("Ff",_util.AnnotationFieldFlag.RADIO),t.set("AP",e),t.set("AS",_primitives.Name.get("Off"));const l=_primitives.Ref.get(124,0),u=new _test_utils.XRefMock([{ref:l,data:t}]),d=new _worker.WorkerTask("test print"),_=await _annotation.AnnotationFactory.create(u,l,i,a),f=new Map,m=await _.getOperatorList(o,d,!1,f);expect(m.argsArray.length).toEqual(3),expect(m.fnArray).toEqual([_util.OPS.beginAnnotation,_util.OPS.setFillRGBColor,_util.OPS.endAnnotation]),expect(m.argsArray[0]).toEqual(["124R",[0,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0]]),expect(m.argsArray[1]).toEqual(new Uint8ClampedArray([76,51,26]))})),it("should save radio buttons",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict;n.set("Checked",_primitives.Ref.get(314,0)),n.set("Off",_primitives.Ref.get(271,0)),e.set("N",n),t.set("Ff",_util.AnnotationFieldFlag.RADIO),t.set("AP",e);const s=_primitives.Ref.get(123,0),r=_primitives.Ref.get(456,0),c=new _primitives.Dict;c.set("V",_primitives.Name.get("Off")),c.set("Kids",[s]),t.set("Parent",r);const p=new _test_utils.XRefMock([{ref:s,data:t},{ref:r,data:c}]);c.xref=p,t.xref=p,o.xref=p;const l=new _worker.WorkerTask("test save"),u=await _annotation.AnnotationFactory.create(p,s,i,a),d=new Map;d.set(u.data.id,{value:!0});let _=await u.save(o,l,d);expect(_.length).toEqual(2);const[f,m]=_;f.data=f.data.replace(/\(D:\d+\)/,"(date)"),expect(f.ref).toEqual(_primitives.Ref.get(123,0)),expect(f.data).toEqual("123 0 obj\n<< /Type /Annot /Subtype /Widget /FT /Btn /Ff 32768 /AP << /N << /Checked 314 0 R /Off 271 0 R>>>> /Parent 456 0 R /AS /Checked /M (date)>>\nendobj\n"),expect(m.ref).toEqual(_primitives.Ref.get(456,0)),expect(m.data).toEqual("456 0 obj\n<< /V /Checked /Kids [123 0 R]>>\nendobj\n"),d.set(u.data.id,{value:!1}),_=await u.save(o,l,d),expect(_).toEqual(null)})),it("should save radio buttons without a field value",(async function(){const e=new _primitives.Dict,n=new _primitives.Dict;n.set("Checked",_primitives.Ref.get(314,0)),n.set("Off",_primitives.Ref.get(271,0)),e.set("N",n),t.set("Ff",_util.AnnotationFieldFlag.RADIO),t.set("AP",e);const s=_primitives.Ref.get(123,0),r=_primitives.Ref.get(456,0),c=new _primitives.Dict;c.set("Kids",[s]),t.set("Parent",r);const p=new _test_utils.XRefMock([{ref:s,data:t},{ref:r,data:c}]);c.xref=p,t.xref=p,o.xref=p;const l=new _worker.WorkerTask("test save"),u=await _annotation.AnnotationFactory.create(p,s,i,a),d=new Map;d.set(u.data.id,{value:!0});const _=await u.save(o,l,d);expect(_.length).toEqual(2);const[f,m]=_;f.data=f.data.replace(/\(D:\d+\)/,"(date)"),expect(f.ref).toEqual(_primitives.Ref.get(123,0)),expect(f.data).toEqual("123 0 obj\n<< /Type /Annot /Subtype /Widget /FT /Btn /Ff 32768 /AP << /N << /Checked 314 0 R /Off 271 0 R>>>> /Parent 456 0 R /AS /Checked /M (date)>>\nendobj\n"),expect(m.ref).toEqual(_primitives.Ref.get(456,0)),expect(m.data).toEqual("456 0 obj\n<< /Kids [123 0 R] /V /Checked>>\nendobj\n")})),it("should save nothing",(async function(){const e=_primitives.Ref.get(124,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),s=new _worker.WorkerTask("test save"),r=await _annotation.AnnotationFactory.create(n,e,i,a),c=new Map,p=await r.save(o,s,c);expect(p).toEqual(null)})),it("should handle push buttons",(async function(){const e=_primitives.Ref.get(124,0);t.set("Ff",_util.AnnotationFieldFlag.PUSHBUTTON);const n=new _primitives.Dict;n.set("S",_primitives.Name.get("JavaScript")),n.set("JS","do_something();"),t.set("A",n);const o=new _test_utils.XRefMock([{ref:e,data:t}]),{data:s}=await _annotation.AnnotationFactory.create(o,e,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(s.pushButton).toEqual(!0),expect(s.actions.Action).toEqual(["do_something();"])})),it("should handle push buttons that act as a tooltip only",(async function(){const e=_primitives.Ref.get(124,0);t.set("Ff",_util.AnnotationFieldFlag.PUSHBUTTON),t.set("TU","An alternative text");const n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.pushButton).toEqual(!0),expect(o.alternativeText).toEqual("An alternative text")})),it("should handle URL in A dict in push buttons",(async function(){const e=_primitives.Ref.get(124,0);t.set("Ff",_util.AnnotationFieldFlag.PUSHBUTTON);const n=new _primitives.Dict;n.set("S",_primitives.Name.get("JavaScript")),n.set("JS","app.launchURL('https://developer.mozilla.org/en-US/', true)"),t.set("A",n);const o=new _test_utils.XRefMock([{ref:e,data:t}]),{data:s}=await _annotation.AnnotationFactory.create(o,e,i,a);expect(s.url).toEqual("https://developer.mozilla.org/en-US/")})),it("should handle URL in AA dict in push buttons",(async function(){const e=_primitives.Ref.get(124,0);t.set("Ff",_util.AnnotationFieldFlag.PUSHBUTTON);const n=new _primitives.Dict;n.set("S",_primitives.Name.get("JavaScript")),n.set("JS","app.launchURL('https://developer.mozilla.org/en-US/', true)");const o=new _primitives.Dict;o.set("D",n),t.set("AA",o);const s=new _test_utils.XRefMock([{ref:e,data:t}]),{data:r}=await _annotation.AnnotationFactory.create(s,e,i,a);expect(r.url).toEqual("https://developer.mozilla.org/en-US/")}))})),describe("ChoiceWidgetAnnotation",(function(){let t,e;beforeEach((function(){t=new _primitives.Dict,t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Widget")),t.set("FT",_primitives.Name.get("Ch"));const n=new _primitives.Dict;n.set("BaseFont",_primitives.Name.get("Helvetica")),n.set("Type",_primitives.Name.get("Font")),n.set("Subtype",_primitives.Name.get("Type1"));const i=_primitives.Ref.get(314,0);e={ref:i,data:n};const a=new _primitives.Dict,o=new _primitives.Dict;o.set("Helv",i),a.set("Font",o),t.set("DA","/Helv 5 Tf"),t.set("DR",a),t.set("Rect",[0,0,32,10])})),afterEach((function(){t=e=null})),it("should handle missing option arrays",(async function(){const e=_primitives.Ref.get(122,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.options).toEqual([])})),it("should handle option arrays with array elements",(async function(){const e=_primitives.Ref.get(20,0),n="Bar",o=_primitives.Ref.get(10,0),s=["bar_export",e],r=[["foo_export","Foo"],o],c=[{exportValue:"foo_export",displayValue:"Foo"},{exportValue:"bar_export",displayValue:"Bar"}];t.set("Opt",r);const p=_primitives.Ref.get(123,0),l=new _test_utils.XRefMock([{ref:p,data:t},{ref:e,data:n},{ref:o,data:s}]),{data:u}=await _annotation.AnnotationFactory.create(l,p,i,a);expect(u.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(u.options).toEqual(c)})),it("should handle option arrays with string elements",(async function(){const e=_primitives.Ref.get(10,0),n="Bar",o=["Foo",e],s=[{exportValue:"Foo",displayValue:"Foo"},{exportValue:"Bar",displayValue:"Bar"}];t.set("Opt",o);const r=_primitives.Ref.get(981,0),c=new _test_utils.XRefMock([{ref:r,data:t},{ref:e,data:n}]),{data:p}=await _annotation.AnnotationFactory.create(c,r,i,a);expect(p.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(p.options).toEqual(s)})),it("should handle inherited option arrays (issue 8094)",(async function(){const e=[["Value1","Description1"],["Value2","Description2"]],n=[{exportValue:"Value1",displayValue:"Description1"},{exportValue:"Value2",displayValue:"Description2"}],o=new _primitives.Dict;o.set("Opt",e),t.set("Parent",o);const s=_primitives.Ref.get(123,0),r=new _test_utils.XRefMock([{ref:s,data:t}]),{data:c}=await _annotation.AnnotationFactory.create(r,s,i,a);expect(c.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(c.options).toEqual(n)})),it("should decode form values",(async function(){const e="\xfe\xff\0F\0o\0o",n="Foo";t.set("Opt",[e]),t.set("V",e),t.set("DV",_primitives.Name.get("foo"));const o=_primitives.Ref.get(984,0),s=new _test_utils.XRefMock([{ref:o,data:t}]),{data:r}=await _annotation.AnnotationFactory.create(s,o,i,a);expect(r.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(r.fieldValue).toEqual([n]),expect(r.defaultFieldValue).toEqual("foo"),expect(r.options).toEqual([{exportValue:n,displayValue:n}])})),it("should convert the field value to an array",(async function(){const e=[null,"Foo",["Foo","Bar"]],n=[[],["Foo"],["Foo","Bar"]];let o=Promise.resolve();for(let s=0,r=e.length;s<r;s++)o=o.then((()=>{t.set("V",e[s]);const o=_primitives.Ref.get(968,0),r=new _test_utils.XRefMock([{ref:o,data:t}]);return _annotation.AnnotationFactory.create(r,o,i,a).then((({data:t})=>{expect(t.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(t.fieldValue).toEqual(n[s])}))}));await o})),it("should handle unknown flags",(async function(){const e=_primitives.Ref.get(166,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.readOnly).toEqual(!1),expect(o.hidden).toEqual(!1),expect(o.combo).toEqual(!1),expect(o.multiSelect).toEqual(!1)})),it("should not set invalid flags",(async function(){t.set("Ff","readonly");const e=_primitives.Ref.get(165,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.readOnly).toEqual(!1),expect(o.hidden).toEqual(!1),expect(o.combo).toEqual(!1),expect(o.multiSelect).toEqual(!1)})),it("should set valid flags",(async function(){t.set("Ff",_util.AnnotationFieldFlag.READONLY+_util.AnnotationFieldFlag.COMBO+_util.AnnotationFieldFlag.MULTISELECT);const e=_primitives.Ref.get(512,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.WIDGET),expect(o.readOnly).toEqual(!0),expect(o.hidden).toEqual(!1),expect(o.combo).toEqual(!0),expect(o.multiSelect).toEqual(!0)})),it("should render choice for printing",(async function(){const n=_primitives.Ref.get(271,0),s=new _test_utils.XRefMock([{ref:n,data:t},e]),r=new _worker.WorkerTask("test print");o.xref=s;const c=await _annotation.AnnotationFactory.create(s,n,i,a),p=new Map;p.set(c.data.id,{value:"a value"});const l=await c._getAppearance(o,r,p);expect(l).toEqual("/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (a value) Tj ET Q EMC")})),it("should save choice",(async function(){t.set("Opt",["A","B","C"]),t.set("V","A");const e=_primitives.Ref.get(123,0),n=new _test_utils.XRefMock([{ref:e,data:t}]);o.xref=n;const s=new _worker.WorkerTask("test save"),r=await _annotation.AnnotationFactory.create(n,e,i,a),c=new Map;c.set(r.data.id,{value:"C"});const p=await r.save(o,s,c);expect(p.length).toEqual(2);const[l,u]=p;expect(l.ref).toEqual(_primitives.Ref.get(123,0)),expect(u.ref).toEqual(_primitives.Ref.get(1,0)),l.data=l.data.replace(/\(D:\d+\)/,"(date)"),expect(l.data).toEqual("123 0 obj\n<< /Type /Annot /Subtype /Widget /FT /Ch /DA (/Helv 5 Tf) /DR << /Font << /Helv 314 0 R>>>> /Rect [0 0 32 10] /Opt [(A) (B) (C)] /V (C) /AP << /N 1 0 R>> /M (date)>>\nendobj\n"),expect(u.data).toEqual("1 0 obj\n<< /Length 67 /Subtype /Form /Resources << /Font << /Helv 314 0 R>>>> /BBox [0 0 32 10]>> stream\n/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (C) Tj ET Q EMC\nendstream\nendobj\n")}))})),describe("LineAnnotation",(function(){it("should set the line coordinates",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Line")),t.set("L",[1,2,3,4]);const e=_primitives.Ref.get(122,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.LINE),expect(o.lineCoordinates).toEqual([1,2,3,4])}))})),describe("FileAttachmentAnnotation",(function(){it("should correctly parse a file attachment",(async function(){const t=new _stream.StringStream("<<\n/Type /EmbeddedFile\n/Subtype /text#2Fplain\n>>\nstream\nTest attachmentendstream\n"),e=new _parser.Parser({lexer:new _parser.Lexer(t),xref:null,allowStreams:!0}),n=_primitives.Ref.get(18,0),o=e.getObj(),s=new _primitives.Dict;s.set("F",n);const r=_primitives.Ref.get(19,0),c=new _primitives.Dict;c.set("Type",_primitives.Name.get("Filespec")),c.set("Desc",""),c.set("EF",s),c.set("UF","Test.txt");const p=_primitives.Ref.get(20,0),l=new _primitives.Dict;l.set("Type",_primitives.Name.get("Annot")),l.set("Subtype",_primitives.Name.get("FileAttachment")),l.set("FS",r),l.set("T","Topic"),l.set("Contents","Test.txt");const u=new _test_utils.XRefMock([{ref:n,data:o},{ref:r,data:c},{ref:p,data:l}]);s.assignXref(u),c.assignXref(u),l.assignXref(u);const{data:d}=await _annotation.AnnotationFactory.create(u,p,i,a);expect(d.annotationType).toEqual(_util.AnnotationType.FILEATTACHMENT),expect(d.file.filename).toEqual("Test.txt"),expect(d.file.content).toEqual((0,_util.stringToBytes)("Test attachment"))}))})),describe("PopupAnnotation",(function(){it("should inherit properties from its parent",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Text")),t.set("M","D:20190423"),t.set("C",[0,0,1]);const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Popup")),e.set("Parent",t);const n=_primitives.Ref.get(13,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.POPUP),expect(s.modificationDate).toEqual("D:20190423"),expect(s.color).toEqual(new Uint8ClampedArray([0,0,255]))})),it("should handle missing parent properties",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Text"));const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Popup")),e.set("Parent",t);const n=_primitives.Ref.get(13,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.POPUP),expect(s.modificationDate).toEqual(null),expect(s.color).toEqual(null)})),it("should inherit the parent flags when the Popup is not viewable, but the parent is (PR 7352)",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Text")),t.set("F",28);const e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Popup")),e.set("F",25),e.set("Parent",t);const n=_primitives.Ref.get(13,0),o=new _test_utils.XRefMock([{ref:n,data:e}]),{data:s,viewable:r}=await _annotation.AnnotationFactory.create(o,n,i,a);expect(s.annotationType).toEqual(_util.AnnotationType.POPUP),expect(s.annotationFlags).toEqual(25),expect(r).toEqual(!0)})),it("should correctly inherit Contents from group-master annotation if parent has ReplyType == Group",(async function(){const t=_primitives.Ref.get(819,0),e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Annot")),e.set("Subtype",_primitives.Name.get("Text")),e.set("T","Correct Title"),e.set("Contents","Correct Text"),e.set("M","D:20190423"),e.set("C",[0,0,1]);const n=_primitives.Ref.get(820,0),o=new _primitives.Dict;o.set("Type",_primitives.Name.get("Annot")),o.set("Subtype",_primitives.Name.get("Text")),o.set("IRT",t),o.set("RT",_primitives.Name.get("Group")),o.set("T","Reply Title"),o.set("Contents","Reply Text"),o.set("M","D:20190523"),o.set("C",[.4]);const s=_primitives.Ref.get(821,0),r=new _primitives.Dict;r.set("Type",_primitives.Name.get("Annot")),r.set("Subtype",_primitives.Name.get("Popup")),r.set("T","Wrong Title"),r.set("Contents","Wrong Text"),r.set("Parent",n),r.set("M","D:20190623"),r.set("C",[.8]),o.set("Popup",s);const c=new _test_utils.XRefMock([{ref:t,data:e},{ref:n,data:o},{ref:s,data:r}]);e.assignXref(c),r.assignXref(c),o.assignXref(c);const{data:p}=await _annotation.AnnotationFactory.create(c,s,i,a);expect(p.titleObj).toEqual({str:"Correct Title",dir:"ltr"}),expect(p.contentsObj).toEqual({str:"Correct Text",dir:"ltr"}),expect(p.modificationDate).toEqual("D:20190423"),expect(p.color).toEqual(new Uint8ClampedArray([0,0,255]))}))})),describe("InkAnnotation",(function(){it("should handle a single ink list",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Ink")),t.set("InkList",[[1,1,1,2,2,2,3,3]]);const e=_primitives.Ref.get(142,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.INK),expect(o.inkLists.length).toEqual(1),expect(o.inkLists[0]).toEqual([{x:1,y:1},{x:1,y:2},{x:2,y:2},{x:3,y:3}])})),it("should handle multiple ink lists",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Ink")),t.set("InkList",[[1,1,1,2],[3,3,4,5]]);const e=_primitives.Ref.get(143,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.INK),expect(o.inkLists.length).toEqual(2),expect(o.inkLists[0]).toEqual([{x:1,y:1},{x:1,y:2}]),expect(o.inkLists[1]).toEqual([{x:3,y:3},{x:4,y:5}])}))})),describe("HightlightAnnotation",(function(){it("should set quadpoints to null if not defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Highlight"));const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.HIGHLIGHT),expect(o.quadPoints).toEqual(null)})),it("should set quadpoints if defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Highlight")),t.set("Rect",[10,10,20,20]),t.set("QuadPoints",[10,20,20,20,10,10,20,10]);const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.HIGHLIGHT),expect(o.quadPoints).toEqual([[{x:10,y:20},{x:20,y:20},{x:10,y:10},{x:20,y:10}]])})),it("should set quadpoints to null when empty",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Highlight")),t.set("Rect",[10,10,20,20]),t.set("QuadPoints",[]);const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.HIGHLIGHT),expect(o.quadPoints).toEqual(null)}))})),describe("UnderlineAnnotation",(function(){it("should set quadpoints to null if not defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Underline"));const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.UNDERLINE),expect(o.quadPoints).toEqual(null)})),it("should set quadpoints if defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Underline")),t.set("Rect",[10,10,20,20]),t.set("QuadPoints",[10,20,20,20,10,10,20,10]);const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.UNDERLINE),expect(o.quadPoints).toEqual([[{x:10,y:20},{x:20,y:20},{x:10,y:10},{x:20,y:10}]])}))})),describe("SquigglyAnnotation",(function(){it("should set quadpoints to null if not defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Squiggly"));const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.SQUIGGLY),expect(o.quadPoints).toEqual(null)})),it("should set quadpoints if defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("Squiggly")),t.set("Rect",[10,10,20,20]),t.set("QuadPoints",[10,20,20,20,10,10,20,10]);const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.SQUIGGLY),expect(o.quadPoints).toEqual([[{x:10,y:20},{x:20,y:20},{x:10,y:10},{x:20,y:10}]])}))})),describe("StrikeOutAnnotation",(function(){it("should set quadpoints to null if not defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("StrikeOut"));const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.STRIKEOUT),expect(o.quadPoints).toEqual(null)})),it("should set quadpoints if defined",(async function(){const t=new _primitives.Dict;t.set("Type",_primitives.Name.get("Annot")),t.set("Subtype",_primitives.Name.get("StrikeOut")),t.set("Rect",[10,10,20,20]),t.set("QuadPoints",[10,20,20,20,10,10,20,10]);const e=_primitives.Ref.get(121,0),n=new _test_utils.XRefMock([{ref:e,data:t}]),{data:o}=await _annotation.AnnotationFactory.create(n,e,i,a);expect(o.annotationType).toEqual(_util.AnnotationType.STRIKEOUT),expect(o.quadPoints).toEqual([[{x:10,y:20},{x:20,y:20},{x:10,y:10},{x:20,y:10}]])}))}))}));