"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.NodeStandardFontDataFactory=exports.NodeCMapReaderFactory=exports.NodeCanvasFactory=void 0;var _base_factory=require("./base_factory.js"),_is_node=require("../shared/is_node.js"),_util=require("../shared/util.js");let NodeCanvasFactory=class{constructor(){(0,_util.unreachable)("Not implemented: NodeCanvasFactory")}};exports.NodeCanvasFactory=NodeCanvasFactory;let NodeCMapReaderFactory=class{constructor(){(0,_util.unreachable)("Not implemented: NodeCMapReaderFactory")}};exports.NodeCMapReaderFactory=NodeCMapReaderFactory;let NodeStandardFontDataFactory=class{constructor(){(0,_util.unreachable)("Not implemented: NodeStandardFontDataFactory")}};if(exports.NodeStandardFontDataFactory=NodeStandardFontDataFactory,_is_node.isNodeJS){const a=function(a){return new Promise(((e,t)=>{const r=require("fs");r.readFile(a,((a,r)=>{!a&&r?e(new Uint8Array(r)):t(new Error(a))}))}))};exports.NodeCanvasFactory=NodeCanvasFactory=class extends _base_factory.BaseCanvasFactory{_createCanvas(a,e){const t=require("canvas");return t.createCanvas(a,e)}},exports.NodeCMapReaderFactory=NodeCMapReaderFactory=class extends _base_factory.BaseCMapReaderFactory{_fetchData(e,t){return a(e).then((a=>({cMapData:a,compressionType:t})))}},exports.NodeStandardFontDataFactory=NodeStandardFontDataFactory=class extends _base_factory.BaseStandardFontDataFactory{_fetchData(e){return a(e)}}}