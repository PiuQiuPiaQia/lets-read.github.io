"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.BaseSVGFactory=exports.BaseStandardFontDataFactory=exports.BaseCMapReaderFactory=exports.BaseCanvasFactory=void 0;var _util=require("../shared/util.js");class BaseCanvasFactory{constructor(){this.constructor===BaseCanvasFactory&&(0,_util.unreachable)("Cannot initialize BaseCanvasFactory.")}create(a,t){if(a<=0||t<=0)throw new Error("Invalid canvas size");const e=this._createCanvas(a,t);return{canvas:e,context:e.getContext("2d")}}reset(a,t,e){if(!a.canvas)throw new Error("Canvas is not specified");if(t<=0||e<=0)throw new Error("Invalid canvas size");a.canvas.width=t,a.canvas.height=e}destroy(a){if(!a.canvas)throw new Error("Canvas is not specified");a.canvas.width=0,a.canvas.height=0,a.canvas=null,a.context=null}_createCanvas(a,t){(0,_util.unreachable)("Abstract method `_createCanvas` called.")}}exports.BaseCanvasFactory=BaseCanvasFactory;class BaseCMapReaderFactory{constructor({baseUrl:a=null,isCompressed:t=!1}){this.constructor===BaseCMapReaderFactory&&(0,_util.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=a,this.isCompressed=t}async fetch({name:a}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!a)throw new Error("CMap name must be specified.");const t=this.baseUrl+a+(this.isCompressed?".bcmap":""),e=this.isCompressed?_util.CMapCompressionType.BINARY:_util.CMapCompressionType.NONE;return this._fetchData(t,e).catch((a=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${t}`)}))}_fetchData(a,t){(0,_util.unreachable)("Abstract method `_fetchData` called.")}}exports.BaseCMapReaderFactory=BaseCMapReaderFactory;class BaseStandardFontDataFactory{constructor({baseUrl:a=null}){this.constructor===BaseStandardFontDataFactory&&(0,_util.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=a}async fetch({filename:a}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!a)throw new Error("Font filename must be specified.");const t=`${this.baseUrl}${a}`;return this._fetchData(t).catch((a=>{throw new Error(`Unable to load font data at: ${t}`)}))}_fetchData(a){(0,_util.unreachable)("Abstract method `_fetchData` called.")}}exports.BaseStandardFontDataFactory=BaseStandardFontDataFactory;class BaseSVGFactory{constructor(){this.constructor===BaseSVGFactory&&(0,_util.unreachable)("Cannot initialize BaseSVGFactory.")}create(a,t){if(a<=0||t<=0)throw new Error("Invalid SVG dimensions");const e=this._createSVG("svg:svg");return e.setAttribute("version","1.1"),e.setAttribute("width",`${a}px`),e.setAttribute("height",`${t}px`),e.setAttribute("preserveAspectRatio","none"),e.setAttribute("viewBox",`0 0 ${a} ${t}`),e}createElement(a){if("string"!==typeof a)throw new Error("Invalid SVG element type");return this._createSVG(a)}_createSVG(a){(0,_util.unreachable)("Abstract method `_createSVG` called.")}}exports.BaseSVGFactory=BaseSVGFactory;