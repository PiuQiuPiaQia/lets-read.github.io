"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.StringStream=exports.Stream=exports.NullStream=void 0;var _base_stream=require("./base_stream.js"),_util=require("../shared/util.js");class Stream extends _base_stream.BaseStream{constructor(t,e,s,r){super(),this.bytes=t instanceof Uint8Array?t:new Uint8Array(t),this.start=e||0,this.pos=this.start,this.end=e+s||this.bytes.length,this.dict=r}get length(){return this.end-this.start}get isEmpty(){return 0===this.length}getByte(){return this.pos>=this.end?-1:this.bytes[this.pos++]}getBytes(t,e=!1){const s=this.bytes,r=this.pos,a=this.end;if(!t){const t=s.subarray(r,a);return e?new Uint8ClampedArray(t):t}let i=r+t;i>a&&(i=a),this.pos=i;const n=s.subarray(r,i);return e?new Uint8ClampedArray(n):n}getByteRange(t,e){return t<0&&(t=0),e>this.end&&(e=this.end),this.bytes.subarray(t,e)}reset(){this.pos=this.start}moveStart(){this.start=this.pos}makeSubStream(t,e,s=null){return new Stream(this.bytes.buffer,t,e,s)}}exports.Stream=Stream;class StringStream extends Stream{constructor(t){super((0,_util.stringToBytes)(t))}}exports.StringStream=StringStream;class NullStream extends Stream{constructor(){super(new Uint8Array(0))}}exports.NullStream=NullStream;