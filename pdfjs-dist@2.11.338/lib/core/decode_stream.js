"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.StreamsSequenceStream=exports.DecodeStream=void 0;var _base_stream=require("./base_stream.js"),_stream=require("./stream.js");const emptyBuffer=new Uint8Array(0);class DecodeStream extends _base_stream.BaseStream{constructor(e){if(super(),this._rawMinBufferLength=e||0,this.pos=0,this.bufferLength=0,this.eof=!1,this.buffer=emptyBuffer,this.minBufferLength=512,e)while(this.minBufferLength<e)this.minBufferLength*=2}get isEmpty(){while(!this.eof&&0===this.bufferLength)this.readBlock();return 0===this.bufferLength}ensureBuffer(e){const t=this.buffer;if(e<=t.byteLength)return t;let s=this.minBufferLength;while(s<e)s*=2;const r=new Uint8Array(s);return r.set(t),this.buffer=r}getByte(){const e=this.pos;while(this.bufferLength<=e){if(this.eof)return-1;this.readBlock()}return this.buffer[this.pos++]}getBytes(e,t=!1){const s=this.pos;let r;if(e){this.ensureBuffer(s+e),r=s+e;while(!this.eof&&this.bufferLength<r)this.readBlock();const t=this.bufferLength;r>t&&(r=t)}else{while(!this.eof)this.readBlock();r=this.bufferLength}this.pos=r;const i=this.buffer.subarray(s,r);return!t||i instanceof Uint8ClampedArray?i:new Uint8ClampedArray(i)}reset(){this.pos=0}makeSubStream(e,t,s=null){if(void 0===t)while(!this.eof)this.readBlock();else{const s=e+t;while(this.bufferLength<=s&&!this.eof)this.readBlock()}return new _stream.Stream(this.buffer,e,t,s)}getBaseStreams(){return this.str?this.str.getBaseStreams():null}}exports.DecodeStream=DecodeStream;class StreamsSequenceStream extends DecodeStream{constructor(e,t=null){let s=0;for(const r of e)s+=r instanceof DecodeStream?r._rawMinBufferLength:r.length;super(s),this.streams=e,this._onError=t}readBlock(){const e=this.streams;if(0===e.length)return void(this.eof=!0);const t=e.shift();let s;try{s=t.getBytes()}catch(n){if(this._onError)return void this._onError(n,t.dict&&t.dict.objId);throw n}const r=this.bufferLength,i=r+s.length,h=this.ensureBuffer(i);h.set(s,r),this.bufferLength=i}getBaseStreams(){const e=[];for(const t of this.streams){const s=t.getBaseStreams();s&&e.push(...s)}return e.length>0?e:null}}exports.StreamsSequenceStream=StreamsSequenceStream;