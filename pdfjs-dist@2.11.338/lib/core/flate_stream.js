"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.FlateStream=void 0;var _decode_stream=require("./decode_stream.js"),_util=require("../shared/util.js");const codeLenCodeMap=new Int32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),lengthDecode=new Int32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),distDecode=new Int32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),fixedLitCodeTab=[new Int32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],fixedDistCodeTab=[new Int32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5];class FlateStream extends _decode_stream.DecodeStream{constructor(e,t){super(t),this.str=e,this.dict=e.dict;const r=e.getByte(),i=e.getByte();if(-1===r||-1===i)throw new _util.FormatError(`Invalid header in flate stream: ${r}, ${i}`);if(8!==(15&r))throw new _util.FormatError(`Unknown compression method in flate stream: ${r}, ${i}`);if(((r<<8)+i)%31!==0)throw new _util.FormatError(`Bad FCHECK in flate stream: ${r}, ${i}`);if(32&i)throw new _util.FormatError(`FDICT bit set in flate stream: ${r}, ${i}`);this.codeSize=0,this.codeBuf=0}getBits(e){const t=this.str;let r,i=this.codeSize,o=this.codeBuf;while(i<e){if(-1===(r=t.getByte()))throw new _util.FormatError("Bad encoding in flate stream");o|=r<<i,i+=8}return r=o&(1<<e)-1,this.codeBuf=o>>e,this.codeSize=i-=e,r}getCode(e){const t=this.str,r=e[0],i=e[1];let o,s=this.codeSize,n=this.codeBuf;while(s<i){if(-1===(o=t.getByte()))break;n|=o<<s,s+=8}const a=r[n&(1<<i)-1],l=a>>16,f=65535&a;if(l<1||s<l)throw new _util.FormatError("Bad encoding in flate stream");return this.codeBuf=n>>l,this.codeSize=s-l,f}generateHuffmanTable(e){const t=e.length;let r,i=0;for(r=0;r<t;++r)e[r]>i&&(i=e[r]);const o=1<<i,s=new Int32Array(o);for(let n=1,a=0,l=2;n<=i;++n,a<<=1,l<<=1)for(let i=0;i<t;++i)if(e[i]===n){let e=0,t=a;for(r=0;r<n;++r)e=e<<1|1&t,t>>=1;for(r=e;r<o;r+=l)s[r]=n<<16|i;++a}return[s,i]}readBlock(){let e,t;const r=this.str;let i,o,s=this.getBits(3);if(1&s&&(this.eof=!0),s>>=1,0===s){let t;if(-1===(t=r.getByte()))throw new _util.FormatError("Bad block header in flate stream");let i=t;if(-1===(t=r.getByte()))throw new _util.FormatError("Bad block header in flate stream");if(i|=t<<8,-1===(t=r.getByte()))throw new _util.FormatError("Bad block header in flate stream");let o=t;if(-1===(t=r.getByte()))throw new _util.FormatError("Bad block header in flate stream");if(o|=t<<8,o!==(65535&~i)&&(0!==i||0!==o))throw new _util.FormatError("Bad uncompressed block length in flate stream");this.codeBuf=0,this.codeSize=0;const s=this.bufferLength,n=s+i;if(e=this.ensureBuffer(n),this.bufferLength=n,0===i)-1===r.peekByte()&&(this.eof=!0);else{const t=r.getBytes(i);e.set(t,s),t.length<i&&(this.eof=!0)}return}if(1===s)i=fixedLitCodeTab,o=fixedDistCodeTab;else{if(2!==s)throw new _util.FormatError("Unknown block type in flate stream");{const e=this.getBits(5)+257,r=this.getBits(5)+1,s=this.getBits(4)+4,n=new Uint8Array(codeLenCodeMap.length);let a;for(a=0;a<s;++a)n[codeLenCodeMap[a]]=this.getBits(3);const l=this.generateHuffmanTable(n);t=0,a=0;const f=e+r,h=new Uint8Array(f);let d,c,u;while(a<f){const e=this.getCode(l);if(16===e)d=2,c=3,u=t;else if(17===e)d=3,c=3,u=t=0;else{if(18!==e){h[a++]=t=e;continue}d=7,c=11,u=t=0}let r=this.getBits(d)+c;while(r-- >0)h[a++]=u}i=this.generateHuffmanTable(h.subarray(0,e)),o=this.generateHuffmanTable(h.subarray(e,f))}}e=this.buffer;let n=e?e.length:0,a=this.bufferLength;while(1){let r=this.getCode(i);if(r<256){a+1>=n&&(e=this.ensureBuffer(a+1),n=e.length),e[a++]=r;continue}if(256===r)return void(this.bufferLength=a);r-=257,r=lengthDecode[r];let s=r>>16;s>0&&(s=this.getBits(s)),t=(65535&r)+s,r=this.getCode(o),r=distDecode[r],s=r>>16,s>0&&(s=this.getBits(s));const l=(65535&r)+s;a+t>=n&&(e=this.ensureBuffer(a+t),n=e.length);for(let i=0;i<t;++i,++a)e[a]=e[a-l]}}}exports.FlateStream=FlateStream;